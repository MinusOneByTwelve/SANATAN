#!/bin/bash

set -e

clear

CURRENTUSER=$(whoami)
sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
sudo rm -rf /root/.ssh/known_hosts
sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LBLUE='\033[1;34m'
DGRAY='\033[1;35m'
PURPLE='\033[0;35m'
RGRAY='\033[1;30m'
BOLD=$(tput bold)
NORM=$(tput sgr0)
ORANGE='\033[1;33m'

DoubleQuotes='"'
NoQuotes=''

USERINTERACTION="YES"
USERVALS=""
THENODELISTFILE="THEENCNODELISTFILE"

BASE="/opt/Matsya"
sudo mkdir -p $BASE
sudo mkdir -p $BASE/tmp
sudo mkdir -p $BASE/Scripts
sudo mkdir -p $BASE/Secrets
sudo mkdir -p $BASE/Resources
sudo mkdir -p $BASE/Output

source $BASE/Resources/StackVersioningAndMisc

THETOTALNODELIST=()
THETOTALREQNODELIST=()
THETOTALFILELIST=()
AUTOMATEDNODELIST=()
declare -A THETOTALNODEDICTLIST

if [ "$#" -ne 2 ]; then
	if [ "$#" -ne 1 ]; then
		exit
	else
		USERVALS=""
		REQUESTTYPE=$1
	fi
else
	REQUESTTYPE=$1
	USERVALS=$2
	USERINTERACTION="NO"
	IFS='├' read -r -a USERLISTVALS <<< $USERVALS
	
	if [ "$REQUESTTYPE" == "PULL" ] || [ "$REQUESTTYPE" == "pull" ] ; then
		SECRETTHEKEY="${USERLISTVALS[0]}"
		THENODECHOICE="${USERLISTVALS[1]}"
		FROMSOURCE="${USERLISTVALS[2]}"
		TOSOURCE="${USERLISTVALS[3]}"
		NODEREQNUMBER="0"
	else
		SECRETTHEKEY="${USERLISTVALS[0]}"
		INOROUT="${USERLISTVALS[1]}"
		THENODECHOICE="${USERLISTVALS[2]}"
		THEREQFILES="${USERLISTVALS[3]}"
		PLIMIT="${USERLISTVALS[4]}"
		NODEREQNUMBER="-1"
	fi	
fi

if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
	echo -e "${ORANGE}=============================================================${NC}"
	echo -e "\x1b[1;34mV\x1b[mersatile \x1b[1;34mA\x1b[mutomation \x1b[1;34mM\x1b[managing \x1b[1;34mA\x1b[mssorted \x1b[1;34mN\x1b[metworked \x1b[1;34mA\x1b[mpplications"
	echo -e "${GREEN}=============================================================${NC}"
	echo ''
	echo -e "\x1b[3mV   V  AAAAA  M   M  AAAAA  N   N  AAAAA\x1b[m"
	echo -e "\x1b[3mV   V  A   A  MM MM  A   A  NN  N  A   A\x1b[m"
	echo -e "\x1b[3mV   V  AAAAA  M M M  AAAAA  N N N  AAAAA\x1b[m"
	echo -e "\x1b[3m V V   A   A  M   M  A   A  N  NN  A   A\x1b[m"
	echo -e "\x1b[3m  V    A   A  M   M  A   A  N   N  A   A\x1b[m"
	echo ''
	echo -e "\x1b[3m\x1b[4mSTACK FILE MANAGE\x1b[m"
	echo ''
fi

if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
	read -s -p "Key 				> " -e -i "" SECRETTHEKEY
	echo ''
	echo ''		
fi

ALLREQNODES=()

TEMPRANDOMFILE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
$BASE/Scripts/SecretsFile-Decrypter "$THENODELISTFILE├1├1├$BASE/tmp/$TEMPRANDOMFILE├$SECRETTHEKEY"
LINES=$(cat $BASE/tmp/$TEMPRANDOMFILE)
for LINE in $LINES; do
	ALLREQNODES+=("$LINE")				
done	
sudo rm -rf $BASE/tmp/$TEMPRANDOMFILE

if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
	echo "$STACKLINELENGTHY"
fi
TempXCounter=1
for EACHXNODE in "${ALLREQNODES[@]}"
do
	IFS='├' read -r -a _EACHXNODE <<< $EACHXNODE
	IXP="${_EACHXNODE[0]}"
	NAXME="${_EACHXNODE[1]}"
	NM="${_EACHXNODE[9]}"
	
	THETOTALNODELIST+=("$TempXCounter")
	THETOTALNODEDICTLIST["$TempXCounter"]="$EACHXNODE"
	
	if [ "$USERINTERACTION" == "NO" ] || [ "$USERINTERACTION" == "no" ] ; then
		if [ "$REQUESTTYPE" == "PUSH" ] || [ "$REQUESTTYPE" == "push" ] || [ "$REQUESTTYPE" == "EXECUTE" ] || [ "$REQUESTTYPE" == "execute" ] ; then
			IFS=',' read -r -a THE_NODE_CHOICE <<< $THENODECHOICE
			for THE_NODE__CHOICE in "${THE_NODE_CHOICE[@]}"
			do		
				if [ "$THE_NODE__CHOICE" == "$IXP" ] || [ "$THE_NODE__CHOICE" == "$NAXME" ] || [ "$THE_NODE__CHOICE" == "$NM" ] ; then
					AUTOMATEDNODELIST+=("$TempXCounter")
				fi
			done
		fi
		
		if [ "$REQUESTTYPE" == "PULL" ] || [ "$REQUESTTYPE" == "pull" ] ; then
			if [ "$THENODECHOICE" == "$IXP" ] || [ "$THENODECHOICE" == "$NAXME" ] || [ "$THENODECHOICE" == "$NM" ] ; then
				NODEREQNUMBER="$TempXCounter"
			fi
		fi			
	fi
		
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then	
		if (( TempXCounter < 10 )) ; then
			echo "(0$TempXCounter) $NM ($IXP)"
		else
			echo "($TempXCounter) $NM ($IXP)"
		fi
	fi
	
	TempXCounter=$((TempXCounter + 1))	
done
if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
	echo "$STACKLINELENGTHY"
fi

if [ "$REQUESTTYPE" == "PULL" ] || [ "$REQUESTTYPE" == "pull" ] ; then
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
		echo ""	
		read -p "Enter Node Number		> " -e -i "0" NODEREQNUMBER
		echo ""	
		read -p "Enter File Path (Remote)	> " -e -i "NA" FROMSOURCE
		echo ""	
		read -p "Enter File Path (Local)	> " -e -i "NA" TOSOURCE			
	fi

	if [ "$NODEREQNUMBER" == "0" ] ; then
		exit
	else
		TempXCounter=1
		for EACHXNODE in "${ALLREQNODES[@]}"
		do
			IFS='├' read -r -a EACHSPLITNODE <<< $EACHXNODE
			IP="${EACHSPLITNODE[0]}"
			PORT="${EACHSPLITNODE[2]}"
			UN="${EACHSPLITNODE[3]}"
			PW="${EACHSPLITNODE[4]}"
			NM="${EACHSPLITNODE[9]}"
					
			if (( TempXCounter == NODEREQNUMBER )) ; then
				clear
				echo -e "${RED}==============================================================================${NC}"
				echo -e "${RED}${BOLD}		$NM ($IP)${NORM}${NC}"
				echo -e "${RED}==============================================================================${NC}"
				echo ''	
				
				REP1=$(sshpass -p "$PW" ssh $UN@$IP -p $PORT -o "StrictHostKeyChecking=no" "md5sum '$FROMSOURCE'")
				IFS=' ' read -r -a _REP1 <<< "$REP1"
				sshpass -p "$PW" scp -P $PORT $UN@$IP:"$FROMSOURCE" "$TOSOURCE"
				TMD5SH=($(md5sum "$TOSOURCE"))
				
				echo ''
				
				if [ "${_REP1[0]}" == "$TMD5SH" ] ; then
					echo "$THENODECHOICE [$FROMSOURCE] => $TOSOURCE = SUCCESS"
				else
					echo "$THENODECHOICE [$FROMSOURCE] => $TOSOURCE = FAILURE"
				fi
				
				echo ''				
			fi
									
			TempXCounter=$((TempXCounter + 1))	
		done
	fi

	sudo rm -rf /root/.bash_history
	sudo rm -rf /home/$CURRENTUSER/.bash_history
	
	exit
fi

if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
	echo ""	
	read -p "INCLUDE(1) / EXCLUDE(2)	> " -e -i "1" INOROUT
	echo ""	
	read -p "Enter Node Number(s) {COMMA}	> " -e -i "0" NODEREQNUMBER
	echo ""	
	read -p "Enter File Path(s) {COMMA}	> " -e -i "NA" THEREQFILES	
fi

if [ "$NODEREQNUMBER" == "0" ] ; then
	exit
else
	if [ "$THEREQFILES" == "NA" ] ; then
		exit
	else
		IFS=',' read -r -a NODEREQ_NUMBER <<< $NODEREQNUMBER
		IFS=',' read -r -a THEREQ_FILES <<< $THEREQFILES

		declare -A THETOTALDICTFILELIST
		for THEREQ__FILES in "${THEREQ_FILES[@]}"
		do			
			if [ -f "$THEREQ__FILES" ]
			then		
				THETOTALFILELIST+=("$THEREQ__FILES")
				THEMD5HASH=($(md5sum "$THEREQ__FILES"))
				THETOTALDICTFILELIST["$THEREQ__FILES"]="$THEMD5HASH"
			fi				
		done
		
		THELENTOTALFILELIST=${#THETOTALFILELIST[@]}
		if (( $THELENTOTALFILELIST < 1 )) ; then
			exit
		fi
							
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then		
			if [ "$INOROUT" == "1" ] ; then
				for NODEREQ__NUMBER in "${NODEREQ_NUMBER[@]}"
				do
					THETOTALREQNODELIST+=("$NODEREQ__NUMBER")	
				done
			else
				THETOTALREQNODELIST=(`echo ${THETOTALNODELIST[@]} ${NODEREQ_NUMBER[@]} | tr ' ' '\n' | sort | uniq -u `)
			fi
		else
			if [ "$INOROUT" == "1" ] ; then
				for NODEREQ__NUMBER in "${AUTOMATEDNODELIST[@]}"
				do
					THETOTALREQNODELIST+=("$NODEREQ__NUMBER")	
				done
			else
				THETOTALREQNODELIST=(`echo ${THETOTALNODELIST[@]} ${AUTOMATEDNODELIST[@]} | tr ' ' '\n' | sort | uniq -u `)
			fi		
		fi
		
		THELENTOTALREQNODELIST=${#THETOTALREQNODELIST[@]}
		if (( $THELENTOTALREQNODELIST < 1 )) ; then
			exit
		fi
				
		TEMPPLIMIT=$((THELENTOTALFILELIST * THELENTOTALREQNODELIST))

		THECORECOUNT=$(grep -c ^processor /proc/cpuinfo)
		
		if (( $TEMPPLIMIT > $THECORECOUNT )) ; then
			TEMPPLIMIT=$((THECORECOUNT + 0))
		fi
				
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
			echo ""	
			read -p "Parallelization Limit		> " -e -i "$TEMPPLIMIT" PLIMIT	
		fi		

		if (( $PLIMIT > $TEMPPLIMIT )) ; then
			PLIMIT=$((TEMPPLIMIT + 0))
		fi
				
		if (( $PLIMIT > $THECORECOUNT )) ; then
			PLIMIT=$((PLIMIT + 0))
		fi

		PARALLELFUNCCOUNT=0
		THEPARALLELFUNC_LIST=()
		
		THEPARALLELFUNCTIONLIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		THENEWPRFUNC='#!/bin/bash'"
"
		echo "$THENEWPRFUNC" | sudo tee $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
		sudo chmod 777 $BASE/tmp/$THEPARALLELFUNCTIONLIST

		TPFL2=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1) && touch $BASE/tmp/$TPFL2 && sudo chmod 777 $BASE/tmp/$TPFL2
		NODECOLLECTION=""
		NODEACCESSCOLLECTION=""
		
		for NODE in "${THETOTALREQNODELIST[@]}"
		do
			IFS='├' read -r -a EACHSPLITNODE <<< "${THETOTALNODEDICTLIST[$NODE]}"
			IP="${EACHSPLITNODE[0]}"
			PORT="${EACHSPLITNODE[2]}"
			UN="${EACHSPLITNODE[3]}"
			PW="${EACHSPLITNODE[4]}"
			NM="${EACHSPLITNODE[9]}"
			VARN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
			NODECOLLECTION="$NODECOLLECTION,$NM"
			NODEACCESSCOLLECTION="$NODEACCESSCOLLECTION,$IP├$PORT├$UN├$PW"
					
			echo -n "
THERESPONSE$VARN=\$(sshpass -p \"$PW\" ssh $UN@$IP -p $PORT -o \"StrictHostKeyChecking=no\" \"STATUS=\\\"\\\"" >> $BASE/tmp/$TPFL2

			FILECOLLECTION=""
			
			for FILE in "${THETOTALFILELIST[@]}"
			do			
				HSH="${THETOTALDICTFILELIST[$FILE]}"
				COREFILENAME=$(basename -- "$FILE")
				FILECOLLECTION="$FILECOLLECTION,$FILE"
				
				echo -n " && CHECKFILE=\\\$([ -f \\\"/home/$UN/$COREFILENAME\\\" ] && echo 1 || echo 0) && STATUS=\\\"\\\$STATUS,\\\$CHECKFILE\\\"" >> $BASE/tmp/$TPFL2
								
				VAR1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
				
				THEPARALLELFUNCTIONNAME="PF_""$VAR1""_$NODE"
				echo "function $THEPARALLELFUNCTIONNAME(){" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
				echo "	TempCounter$VAR1=0
	while [ \$TempCounter$VAR1 -lt 1 ]
	do			
		sshpass -p \"$PW\" scp -P $PORT \"$FILE\" $UN@$IP:/home/$UN
		THERESPONSE$VAR1=\$(sshpass -p \"$PW\" ssh $UN@$IP -p $PORT -o \"StrictHostKeyChecking=no\" \"md5sum '/home/$UN/$COREFILENAME'\")
		IFS=' ' read -r -a _THERESPONSE <<< \"\$THERESPONSE$VAR1\"
		if [ \"\${_THERESPONSE[0]}\" == \"$HSH\" ] ; then
			TempCounter$VAR1=\$((TempCounter$VAR1 + 1))
			echo \"$NM => $COREFILENAME = SUCCESS\"
		else
			THERESPONSE2$VAR1=\$(sshpass -p \"$PW\" ssh $UN@$IP -p $PORT -o \"StrictHostKeyChecking=no\" \"sudo rm -rf '/home/$UN/$COREFILENAME'\")
			echo \"$NM => $COREFILENAME = FAILURE\"
		fi
	done" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null				
				echo "}" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
				
				THEPARALLELFUNC_LIST+=("$THEPARALLELFUNCTIONNAME")
				PARALLELFUNCCOUNT=$((PARALLELFUNCCOUNT + 1))					
			done
			
			echo -n " && echo \\\$STATUS\")" >> $BASE/tmp/$TPFL2
			echo " && THERESPONSE$VARN=\${THERESPONSE$VARN:1} && RESULTCOLLECTION=\"\$RESULTCOLLECTION├\$THERESPONSE$VARN\"" | sudo tee -a $BASE/tmp/$TPFL2 > /dev/null	
		done
					
		echo "function ParallelFunctionDummy(){
echo \"\"
}" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null	

		if [ "$PARALLELFUNCCOUNT" -gt "$PLIMIT" ]; then
			echo "" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
			THEREQPARALLEL=$((PARALLELFUNCCOUNT))
			ITERATIONREQ=$((THEREQPARALLEL / PLIMIT))
			ITERATIONREQMOD=$((THEREQPARALLEL % PLIMIT))
			if [ "$ITERATIONREQMOD" -gt 0 ]; then
				ITERATIONREQ=$((ITERATIONREQ + 1))
			fi
			TotalIteration=0
			LEFTOVERCOUNT=$((PARALLELFUNCCOUNT))
			TOBERUN=$((PLIMIT))
			for (( IterationOuter=0; IterationOuter<ITERATIONREQ; IterationOuter++ ))
			do
				if (( $TotalIteration == 0 )) ; then
					DEDUCTRUN=$((LEFTOVERCOUNT-TOBERUN))	
				else
					DEDUCTRUN=$((DEDUCTRUN-TOBERUN))	
				fi	
				if [ "$DEDUCTRUN" -lt 0 ]; then
					TOBERUN=$((TOBERUN + DEDUCTRUN))
				fi
				
				THEEXPORTLIST=""
				THEPARALLELEXECLIST="parallel -j $TOBERUN :::"	
				FromCurrent=$((TotalIteration))
				ToLimit=$((TOBERUN + TotalIteration))
				LastNumber=$((ToLimit - 1))
				for (( Iteration=FromCurrent; Iteration<ToLimit; Iteration++ ))
				do  
					if (( $Iteration == $LastNumber )) ; then
						THEEXPORTLIST+="export -f ${THEPARALLELFUNC_LIST[$Iteration]}"
					else
						THEEXPORTLIST+="export -f ${THEPARALLELFUNC_LIST[$Iteration]} && "
					fi
					THEPARALLELEXECLIST+=" ${THEPARALLELFUNC_LIST[$Iteration]}"	   
					TotalIteration=$((TotalIteration + 1))
				done

				echo "$THEEXPORTLIST" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
				echo "$THEPARALLELEXECLIST" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
				echo "" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null			
			done
		else
			THEEXPORTLIST=""
			THEPARALLELEXECLIST="parallel -j $((PARALLELFUNCCOUNT + 1)) :::"

			for THEPARALLELFUNC_LIST_1 in "${THEPARALLELFUNC_LIST[@]}"
			do
				THEEXPORTLIST+="export -f $THEPARALLELFUNC_LIST_1 && "
				THEPARALLELEXECLIST+=" $THEPARALLELFUNC_LIST_1"
			done
			THEEXPORTLIST+="export -f ParallelFunctionDummy"
			THEPARALLELEXECLIST+=" ParallelFunctionDummy"
			echo "$THEEXPORTLIST" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null
			echo "$THEPARALLELEXECLIST" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null		
		fi
		
		NODECOLLECTION=${NODECOLLECTION:1}
		NODEACCESSCOLLECTION=${NODEACCESSCOLLECTION:1}
		FILECOLLECTION=${FILECOLLECTION:1}
		echo "
NODECOLLECTION=\"$NODECOLLECTION\"
NODEACCESSCOLLECTION=\"$NODEACCESSCOLLECTION\"		
FILECOLLECTION=\"$FILECOLLECTION\"
RESULTCOLLECTION=\"\"
PLIMIT=\"$PLIMIT\"
REQUESTTYPE=\"$REQUESTTYPE\"
THEEXECUTIONLIST=()
CURRENTUSER=\"$CURRENTUSER\"
" | sudo tee -a $BASE/tmp/$THEPARALLELFUNCTIONLIST > /dev/null

		TPFL4=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1) && sudo touch $BASE/tmp/$TPFL4 && sudo chmod 777 $BASE/tmp/$TPFL4
		THEPARAEXELLELFUNCTIONLIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		
		echo "
RESULTCOLLECTION=\${RESULTCOLLECTION:1}
IFS=',' read -r -a _NC <<< \$NODECOLLECTION
IFS=',' read -r -a _NAC <<< \$NODEACCESSCOLLECTION
IFS=',' read -r -a _FC <<< \$FILECOLLECTION
IFS='├' read -r -a _RC <<< \$RESULTCOLLECTION
STACKLINELENGTHY=\"$STACKLINELENGTHY\"
BASE=\"$BASE\"
TPFL4=\"$TPFL4\"
THEPARAEXELLELFUNCTIONLIST=\"$THEPARAEXELLELFUNCTIONLIST\"
" | sudo tee -a $BASE/tmp/$TPFL2 > /dev/null
		
		TPFL5=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		sudo cp $BASE/Resources/StackFilePushTemplate $BASE/tmp/$TPFL5
		sudo chmod 777 $BASE/tmp/$TPFL5

		TPFL6=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		sudo cp $BASE/Resources/StackFileExecuteTemplate $BASE/tmp/$TPFL6
		sudo chmod 777 $BASE/tmp/$TPFL6
			
		TPFL3=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		if [ "$REQUESTTYPE" == "PUSH" ] || [ "$REQUESTTYPE" == "push" ] ; then		
			cat $BASE/tmp/$THEPARALLELFUNCTIONLIST $BASE/tmp/$TPFL2 $BASE/tmp/$TPFL5 > $BASE/tmp/$TPFL3
		fi
		if [ "$REQUESTTYPE" == "EXECUTE" ] || [ "$REQUESTTYPE" == "execute" ] ; then		
			cat $BASE/tmp/$THEPARALLELFUNCTIONLIST $BASE/tmp/$TPFL2 $BASE/tmp/$TPFL5 $BASE/tmp/$TPFL6 > $BASE/tmp/$TPFL3
		fi		
		sudo chmod 777 $BASE/tmp/$TPFL3

		echo -e "${RED}¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬${NC}"
		(
			set -Ee
			function _catch {
				echo "ERROR"
				exit 0
			}
			function _finally {
				ABC="XYZ"
			}
			trap _catch ERR
			trap _finally EXIT
			$BASE/tmp/$TPFL3								
		)					
		echo -e "${RED}¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬${NC}"
		echo ''
		
		sudo rm -rf $BASE/tmp/$TPFL2
		sudo rm -rf $BASE/tmp/$THEPARALLELFUNCTIONLIST
		sudo rm -rf $BASE/tmp/$TPFL4
		sudo rm -rf $BASE/tmp/$TPFL5
		sudo rm -rf $BASE/tmp/$TPFL3
		sudo rm -rf $BASE/tmp/$THEPARAEXELLELFUNCTIONLIST
		sudo rm -rf $BASE/tmp/$TPFL6																
	fi
fi

sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

