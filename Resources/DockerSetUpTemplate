#!/bin/bash

CURRENTUSER=$(whoami)
sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
sudo rm -rf /root/.ssh/known_hosts
sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

THEIP="THEREQIP"
THEHOST="THEREQHOSTNAME"
OS="THEREQOS"
DOCKER_DATA_DIR="THEREQDDD"
DFS_DATA_DIR="THEREQDFS"
DFS_DATA2_DIR="THEREQCD2FS"
DFS_CLUSTER_DIR="THEREQCDFS"
TLSSTUFF="THEREQTLS"
PortainerAPort="THEREQAPORT"
PortainerSPort="THEREQSPORT"
STACKNAME="THECURSTACK"
STACKPRETTYNAME="THECURPNSTACK"
VarahaPort1="VP1"
VarahaPort2="VP2"
VarahaPort3="VP3"
VarahaPort4="VP4"
TheReqRL="THEREQROLE"
BDD_PASSWORD="BDDPASSWORD"
BDDPort1="BDD1"
BDDPort2="BDD2"
BDD_HOSTS="BDDHOSTS"
CERTS_DIR="THECERTS"
ELIGIBLEFORVPN="GETVPN"
BDD_CURRHOST="BDDCURRHOST"

sudo rm -rf /etc/hostname && echo "$THEHOST" | sudo tee /etc/hostname
sudo hostnamectl set-hostname $THEHOST --static
sudo hostnamectl set-hostname $THEHOST --transient
sudo hostnamectl set-hostname "$THEHOST" --pretty

sudo rm -f /opt/DSUDONE$STACKNAME

# Function to check and remove lock files
remove_locks() {
    echo "Checking and removing lock files..."
    sudo rm -f /var/lib/dpkg/lock-frontend
    sudo rm -f /var/lib/dpkg/lock
}

# Function to check and terminate running apt or dpkg processes
terminate_processes() {
    echo "Checking for running apt or dpkg processes..."
    pids=$(ps aux | grep -E 'apt|dpkg' | grep -v grep | awk '{print $2}')
    if [ -z "$pids" ]; then
        echo "No running apt or dpkg processes found."
    else
        echo "Terminating running apt or dpkg processes..."
        for pid in $pids; do
            sudo kill -9 $pid
            echo "Terminated process with PID: $pid"
        done
    fi
}

# Function to reconfigure dpkg
reconfigure_dpkg() {
    echo "Reconfiguring dpkg..."
    sudo dpkg --configure -a
}

# Function to update package list
update_package_list() {
    echo "Updating package list..."
    sudo apt-get update -y
}

remove_locks
terminate_processes
remove_locks
reconfigure_dpkg
update_package_list
echo "System is ready for package installation..."

setup_http_server() {
    sudo mkdir -p $DFS_DATA2_DIR/Static$STACKNAME
    sudo chown -R root:root $DFS_DATA2_DIR/Static$STACKNAME
    sudo rm -f $DFS_DATA2_DIR/Static$STACKNAME/Index.html
    echo "CDN For $STACKPRETTYNAME" | sudo tee $DFS_DATA2_DIR/Static$STACKNAME/Index.html
    sudo chmod -R 777 $DFS_DATA2_DIR/Static$STACKNAME
    
    sudo rm -f /etc/systemd/system/CDN$STACKNAME.service
    
    SERVICES=$(systemctl list-units --type=service --state=running | grep 'CDN' | awk '{print $1}')
    if [ -z "$SERVICES" ]; then
        echo "No services starting with CDN found."
    fi
    for service in $SERVICES; do
        echo "Stopping and disabling $service..."
        sudo systemctl stop "$service"
        sudo systemctl disable "$service"
        echo "$service stopped and disabled."
    done    
    
    echo '[Unit]
Description=CDN For '"$STACKPRETTYNAME"'
After=network.target

[Service]
User=root
WorkingDirectory='"$DFS_DATA2_DIR/Static$STACKNAME"'
ExecStart=/usr/bin/python3 -m http.server '"$VarahaPort1"'
Restart=always

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/CDN$STACKNAME.service > /dev/null

    sudo systemctl daemon-reload
    sudo systemctl enable CDN$STACKNAME
    sudo systemctl start CDN$STACKNAME
}

create_error_files() {
    sudo mkdir -p $DFS_DATA_DIR/Errors$STACKNAME
    sudo rm -f $DFS_DATA_DIR/Errors$STACKNAME/*.http
    
    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/400.http
HTTP/1.0 400 Bad Request
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>400 Bad Request</h1>
Your browser sent a request that this server could not understand.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/403.http
HTTP/1.0 403 Forbidden
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>403 Forbidden</h1>
You don't have permission to access this resource.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/408.http
HTTP/1.0 408 Request Timeout
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>408 Request Timeout</h1>
Your browser sent a request that this server could not understand.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/500.http
HTTP/1.0 500 Internal Server Error
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>500 Internal Server Error</h1>
The server encountered an internal error or misconfiguration and was unable to complete your request.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/502.http
HTTP/1.0 502 Bad Gateway
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>502 Bad Gateway</h1>
The server received an invalid response from the upstream server.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/503.http
HTTP/1.0 503 Service Unavailable
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>503 Service Unavailable</h1>
The server is currently unable to handle the request due to a temporary overload or maintenance.<br />
</body></html>
EOF

    cat <<EOF > $DFS_DATA_DIR/Errors$STACKNAME/504.http
HTTP/1.0 504 Gateway Timeout
Cache-Control: no-cache
Connection: close
Content-Type: text/html

<html><body><h1>504 Gateway Timeout</h1>
The server did not receive a timely response from the upstream server.<br />
</body></html>
EOF

sudo chown -R root:root $DFS_DATA_DIR/Errors$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/Errors$STACKNAME
}

disable_selinux_temporary() {
    echo "Current SELinux status:"
    sestatus | grep "SELinux status:"

    sudo setenforce 0
    sudo -H -u root bash -c 'setenforce 0'
    
    echo "Updated SELinux status (temporary):"
    sestatus | grep "SELinux status:"
}

disable_selinux_permanent() {
    sudo sed -i 's/^SELINUX=.*/SELINUX=disabled/g' /etc/selinux/config

    echo "SELinux permanently disabled in /etc/selinux/config:"
    grep "^SELINUX=" /etc/selinux/config
}

install_firewalld() {
    echo "Installing firewalld..."
    if [[ "$OS" == "UBU" ]]; then
        sudo NEEDRESTART_MODE=a $PKG_MANAGER install -y firewalld    
    else
        sudo $PKG_MANAGER install -y firewalld
    fi
    sudo systemctl start firewalld
    sudo systemctl enable firewalld
    echo "Configuring firewall rules explicitly in the public zone..."
    sudo firewall-cmd --zone=public --permanent --add-service=ssh
    sudo firewall-cmd --zone=public --permanent --add-service=http
    sudo firewall-cmd --zone=public --permanent --add-service=https
    sudo firewall-cmd --reload
}

install_python() {
    echo "Installing Python3 and pip..."
    if [[ "$OS" == "UBU" ]]; then
        sudo rm -f /var/lib/dpkg/lock-frontend
        sudo rm -f /var/cache/apt/archives/lock
        sudo rm -f /var/lib/dpkg/lock-frontend
        sudo rm -f /var/cache/apt/archives/lock        
        sudo NEEDRESTART_MODE=a $PKG_MANAGER install -y python3 python3-pip  
        sudo rm -f /var/cache/apt/archives/lock 
        sudo NEEDRESTART_MODE=a $PKG_MANAGER install -y python3 python3-pip         
    else
        sudo $PKG_MANAGER install -y python3 python3-pip 
    fi
}

install_minio() {
	sudo rm -f /usr/bin/mc
	wget https://dl.min.io/client/mc/release/linux-amd64/mc
	chmod +x mc
	sudo mv mc /usr/bin
	
	wget https://dl.min.io/server/minio/release/linux-amd64/minio
	chmod +x minio
	sudo mv minio /usr/bin
	
	sudo mkdir -p $DFS_DATA_DIR/MINIO
	sudo chown -R root:root $DFS_DATA_DIR/MINIO
	sudo chmod -R 777 $DFS_DATA_DIR/MINIO
	sudo mkdir -p $DFS_DATA_DIR/MINIO/DATA
	sudo chown -R root:root $DFS_DATA_DIR/MINIO/DATA
	sudo chmod -R 777 $DFS_DATA_DIR/MINIO/DATA
	sudo mkdir -p $DFS_DATA_DIR/MINIO/CERTS
	sudo chown -R root:root $DFS_DATA_DIR/MINIO/CERTS
	sudo chmod -R 777 $DFS_DATA_DIR/MINIO/CERTS
	sudo mkdir -p $DFS_DATA_DIR/MINIO/CA
	sudo chown -R root:root $DFS_DATA_DIR/MINIO/CA
	sudo chmod -R 777 $DFS_DATA_DIR/MINIO/CA	
	sudo cp $CERTS_DIR/docker/$STACKNAME-server-key.pem $DFS_DATA_DIR/MINIO/CERTS/private.key
	sudo cp $CERTS_DIR/docker/$STACKNAME-server-cert.pem $DFS_DATA_DIR/MINIO/CERTS/public.crt
	sudo cp $CERTS_DIR/docker/$STACKNAME.pem $DFS_DATA_DIR/MINIO/CA/ca.crt	
	sudo chmod 644 $DFS_DATA_DIR/MINIO/CERTS/public.crt
	sudo chmod 600 $DFS_DATA_DIR/MINIO/CERTS/private.key
	sudo chmod 644 $DFS_DATA_DIR/MINIO/CA/ca.crt
		
	sudo rm -f /etc/systemd/system/BDDMinio$STACKNAME.service
	SERVICES=$(systemctl list-units --type=service --state=running | grep 'BDDMinio' | awk '{print $1}')
	if [ -z "$SERVICES" ]; then
		echo "No services starting with BDDMinio found."
	fi
	for service in $SERVICES; do
		echo "Stopping and disabling $service..."
		sudo systemctl stop "$service"
		sudo systemctl disable "$service"
		echo "$service stopped and disabled."
	done
	
	DATAFOLDER="$DFS_DATA_DIR/MINIO/DATA"	
	IFS=',' read -r -a hosts <<< "$BDD_HOSTS"
	command="minio server"
	for host in "${hosts[@]}"; do
	    command="${command} https://${host}:${BDDPort1}${DATAFOLDER}"
	done
	command="${command} --console-address :${BDDPort2}"
	echo "$command"
	
	echo '[Unit]
Description=BDDMinio For '"$STACKPRETTYNAME"'
After=network.target

[Service]
User=root
ExecStart='"$command"'
Environment="MINIO_ROOT_USER=admin"
Environment="MINIO_ROOT_PASSWORD='"$BDD_PASSWORD"'"
Environment="MINIO_CERTS_DIR='"$DFS_DATA_DIR/MINIO/CERTS"'"
Environment="MINIO_CERTS_CAS_DIR='"$DFS_DATA_DIR/MINIO/CA"'"
Restart=always
LimitNOFILE=65536

[Install]
WantedBy=multi-user.target
' | sudo tee /etc/systemd/system/BDDMinio$STACKNAME.service > /dev/null
	sudo systemctl daemon-reload
	if [ ! -f /opt/CLD ]; then
		sudo systemctl enable BDDMinio$STACKNAME
		sudo systemctl start BDDMinio$STACKNAME	
	else
		sudo systemctl stop BDDMinio$STACKNAME
		sudo systemctl disable BDDMinio$STACKNAME		
	fi
	
	pip3 install s3ql
}

THEOSCHOICE="NA"

if [ ! -f /opt/CLD ]; then
	echo 'ON PREMISE'
else
	THEOSCHOICE=$(head -n 1 /opt/CLD)
	
	if [ ! -f /opt/LCL ] || [ ! -f /opt/GBL ]; then
	    echo "One or both files do not exist."
	    exit 1
	else
	    echo "Both files exist."
	fi

	if [[ "$THEOSCHOICE" == "AWS_UBU" ]]; then
		LCLVAL=$(head -n 1 /opt/LCL)
		GBLVAL=$(head -n 1 /opt/GBL)
		SOFTVAL="Y"
		FILEVAL="Y"
		if ! which s3fs >/dev/null || ! which aws >/dev/null; then
		    SOFTVAL="N"
		fi
		if [ ! -f "/shiva/local/bucket/$LCLVAL" ] || [ ! -f "/shiva/global/bucket/$GBLVAL" ]; then
		    FILEVAL="N"
		fi
		if [ "$SOFTVAL" = "N" ] || [ "$FILEVAL" = "N" ]; then
		    if [ -f /opt/EXEC1ON ]; then
			sleep 15
			/opt/EXEC1ON
		    elif [ -f /opt/EXEC1DONE ]; then
			sudo mv /opt/EXEC1DONE /opt/EXEC1ON
			/opt/EXEC1ON
		    fi
		fi	
		DNS_NAME_FILE="/opt/EDN"
		EFS_DNS_NAME=$(cat "$DNS_NAME_FILE")
		MOUNT_POINT="/shiva/global/storage"
		sudo mount -t nfs4 -o nfsvers=4.1 "$EFS_DNS_NAME":/ "$MOUNT_POINT"	
		INTERNALIP=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
		sudo rm -f /opt/WHOAMI2 && sudo touch /opt/WHOAMI2 && sudo chmod 777 /opt/WHOAMI2 && echo "$INTERNALIP" | sudo tee -a /opt/WHOAMI2 > /dev/null
	fi

	if [[ "$THEOSCHOICE" == "GCP_UBU" ]]; then
		INTERNALIP=$(ip addr show ens4 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
		sudo rm -f /opt/WHOAMI2 && sudo touch /opt/WHOAMI2 && sudo chmod 777 /opt/WHOAMI2 && echo "$INTERNALIP" | sudo tee -a /opt/WHOAMI2 > /dev/null
		
		LCLVAL=$(head -n 1 /opt/LCL)
		GBLVAL=$(head -n 1 /opt/GBL)
		SOFTVAL="Y"
		FILEVAL="Y"
		if ! which gcsfuse >/dev/null || ! which gcsfuse >/dev/null; then
		    SOFTVAL="N"
		fi
		if [ ! -f "/shiva/local/bucket/$LCLVAL" ] || [ ! -f "/shiva/global/bucket/$GBLVAL" ]; then
		    FILEVAL="N"
		fi
		if [ "$SOFTVAL" = "N" ] || [ "$FILEVAL" = "N" ]; then
		    if [ -f /opt/EXEC1ON ]; then
			sleep 5
			/opt/EXEC1ON
		    elif [ -f /opt/EXEC1DONE ]; then
			sudo mv /opt/EXEC1DONE /opt/EXEC1ON
			sudo rm -f /etc/apt/sources.list.d/gcsfuse.list
			sudo rm -f /usr/share/keyrings/cloud.google.asc
			echo "deb [signed-by=/usr/share/keyrings/cloud.google.asc] https://packages.cloud.google.com/apt gcsfuse-jammy main" | sudo tee /etc/apt/sources.list.d/gcsfuse.list > /dev/null
			curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo tee /usr/share/keyrings/cloud.google.asc
			sudo apt-get update -y
			sudo apt-get install gcsfuse -y
			sudo gcsfuse --file-mode 777 --dir-mode 777 $LCLVAL "/shiva/local/bucket"
			sudo gcsfuse --file-mode 777 --dir-mode 777 $GBLVAL "/shiva/global/bucket"
			sudo touch /shiva/local/bucket/$LCLVAL
			sudo touch /shiva/global/bucket/$GBLVAL
			sudo mv /opt/EXEC1ON /opt/EXEC1DONE
		    fi
		fi		
	fi
		
	if [[ "$THEOSCHOICE" == "AZURE_UBU" ]]; then
		INTERNALIP=$(ip addr show eth0 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
		sudo rm -f /opt/WHOAMI2 && sudo touch /opt/WHOAMI2 && sudo chmod 777 /opt/WHOAMI2 && echo "$INTERNALIP" | sudo tee -a /opt/WHOAMI2 > /dev/null
		
		SOFTVAL="Y"
		FILEVAL="Y"
		if ! which blobfuse2 >/dev/null || ! which blobfuse2 >/dev/null; then
		    SOFTVAL="N"
		fi
		if [ ! -d "/shiva/local/bucket" ] || [ ! -d "/shiva/global/bucket" ]; then
		    FILEVAL="N"
		fi		
		if [ "$SOFTVAL" = "N" ] || [ "$FILEVAL" = "N" ]; then
		    if [ -f /opt/EXEC1ON ]; then
			sleep 15
		    elif [ -f /opt/EXEC1DONE ]; then
			sudo mv /opt/EXEC1DONE /opt/EXEC1ON
		    fi
		    
		    sudo wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb && sudo dpkg -i packages-microsoft-prod.deb && sudo rm -f packages-microsoft-prod.deb && sudo apt-get update -y && sudo apt-get install libfuse3-dev fuse3 blobfuse2 cifs-utils jq -y
		    
		    /opt/EDN && sudo blobfuse2 mount all /shiva/global --config-file=/opt/globalSC.yaml && sudo blobfuse2 mount all /shiva/local --config-file=/opt/localSC.yaml && sudo mv /opt/EXEC1ON /opt/EXEC1DONE
		fi									
	fi
	
	if [[ "$THEOSCHOICE" == "E2E_UBU" ]]; then
		INTERNALIP=$(ip addr show eth1 | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
		sudo rm -f /opt/WHOAMI2 && sudo touch /opt/WHOAMI2 && sudo chmod 777 /opt/WHOAMI2 && echo "$INTERNALIP" | sudo tee -a /opt/WHOAMI2 > /dev/null
	fi
	
	if [[ "$ELIGIBLEFORVPN" == "Y" ]]; then
		INTERNALIP2=$(ip addr show $STACKNAME | grep 'inet ' | awk '{print $2}' | cut -d'/' -f1)
		sudo rm -f /opt/WHOAMI3 && sudo touch /opt/WHOAMI3 && sudo chmod 777 /opt/WHOAMI3 && echo "$INTERNALIP2" | sudo tee -a /opt/WHOAMI3 > /dev/null		
	fi				
fi

if [[ "$OS" == "UBU" || "$OS" == "Ubuntu" ]]; then
    sudo rm -f /etc/apt/sources.list.d/docker.list
    sudo rm -f /etc/apt/keyrings/docker.gpg
    sudo apt-get remove -y docker docker-engine docker.io containerd runc
    sudo apt-get update -y
    sudo NEEDRESTART_MODE=a apt-get install -y ca-certificates curl gnupg
    sudo mkdir -m 0755 -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    echo 'deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu jammy stable' | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
    sudo apt-get update -y
    sudo rm -rf /etc/glusterfs/glusterd.vol
    sudo NEEDRESTART_MODE=a apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin glusterfs-server glusterfs-client net-tools nfs-common cifs-utils jq wireguard
elif [[ "$OS" == "AZL" ]]; then
    #sudo yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
    #sudo yum install -y yum-utils
    #sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    #sudo yum update -y
    #sudo yum install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin glusterfs-server glusterfs-client
    sudo yum remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
    sudo yum install -y docker
elif [[ "$OS" == "ROCKY" || "$OS" == "ALMA" ]]; then
    sudo dnf remove -y docker docker-client docker-client-latest docker-common docker-latest docker-latest-logrotate docker-logrotate docker-engine
    sudo dnf -y install dnf-plugins-core
    sudo dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
    sudo dnf install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin glusterfs-server glusterfs-client
fi

disable_selinux_temporary
disable_selinux_permanent

# Detect the package manager and disable other firewalls
if [ -f /etc/os-release ]; then
    . /etc/os-release
    case $ID in
        ubuntu)
            PKG_MANAGER="apt-get"
            echo "Disabling UFW and iptables..."
            sudo systemctl stop ufw
            sudo systemctl disable ufw
            sudo apt-get remove -y ufw
            sudo iptables -F
            ;;
        amzn)
            PKG_MANAGER="yum"
            echo "Disabling iptables..."
            sudo systemctl stop iptables
            sudo systemctl disable iptables
            sudo yum remove -y iptables-services
            ;;
        rocky|almalinux)
            PKG_MANAGER="dnf"
            echo "Disabling iptables..."
            sudo systemctl stop iptables
            sudo systemctl disable iptables
            sudo dnf remove -y iptables-services
            ;;
        *)
            echo "Unsupported OS"
            exit 1
            ;;
    esac

    # Install and configure firewalld
    if [[ "$THEOSCHOICE" == "E2E_UBU" ]]; then
	echo 'No Firewall'
    else
    	install_firewalld
    fi
    
    # Install Python3 and pip
    install_python

    echo "Setup completed successfully."
else
    echo "Cannot identify the OS."
    exit 1
fi

sudo mkdir -p $DOCKER_DATA_DIR
sudo chown -R root:docker $DOCKER_DATA_DIR
sudo chmod -R 755 $DOCKER_DATA_DIR

sudo mkdir -p $DFS_DATA_DIR
sudo chown -R root:root $DFS_DATA_DIR
sudo chmod -R 777 $DFS_DATA_DIR

sudo mkdir -p $DFS_CLUSTER_DIR
sudo chown -R root:root $DFS_CLUSTER_DIR
sudo chmod -R 777 $DFS_CLUSTER_DIR
sudo ln -s $DFS_CLUSTER_DIR /$STACKPRETTYNAME 

sudo mkdir -p $DFS_DATA2_DIR
sudo chown -R root:root $DFS_DATA2_DIR
sudo chmod -R 777 $DFS_DATA2_DIR

sudo mkdir -p $DFS_DATA2_DIR/$STACKNAME
sudo chown -R gluster:gluster $DFS_DATA2_DIR/$STACKNAME
sudo chmod -R 777 $DFS_DATA2_DIR/$STACKNAME

sudo mkdir -p $DFS_DATA2_DIR/Static$STACKNAME
sudo chown -R gluster:gluster $DFS_DATA2_DIR/Static$STACKNAME
sudo chmod -R 777 $DFS_DATA2_DIR/Static$STACKNAME

sudo mkdir -p $DFS_DATA_DIR/Portainer$STACKNAME
sudo chown -R gluster:gluster $DFS_DATA_DIR/Portainer$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/Portainer$STACKNAME

sudo mkdir -p $DFS_DATA_DIR/PortainerMnt$STACKNAME
sudo chown -R root:root $DFS_DATA_DIR/PortainerMnt$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/PortainerMnt$STACKNAME

sudo mkdir -p $DFS_DATA_DIR/Tmp$STACKNAME
sudo chown -R root:root $DFS_DATA_DIR/Tmp$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/Tmp$STACKNAME

sudo mkdir -p $DFS_DATA_DIR/Errors$STACKNAME
sudo chown -R root:root $DFS_DATA_DIR/Errors$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/Errors$STACKNAME

sudo mkdir -p $DFS_DATA_DIR/Misc$STACKNAME
sudo chown -R root:root $DFS_DATA_DIR/Misc$STACKNAME
sudo chmod -R 777 $DFS_DATA_DIR/Misc$STACKNAME

if [ "$TheReqRL" == "R" ] ; then
	sudo mkdir -p $DFS_DATA_DIR/Misc$STACKNAME/RunHAProxy
	sudo chown -R root:root $DFS_DATA_DIR/Misc$STACKNAME/RunHAProxy
	sudo chmod -R 777 $DFS_DATA_DIR/Misc$STACKNAME/RunHAProxy
	
	create_error_files
	setup_http_server
	
	if ! python3 -c "import PIL" &> /dev/null; then
	    echo "Pillow is not installed. Installing now..."
	    pip3 install Pillow
	else
	    echo "Pillow is already installed."
	fi
	sudo rm -f $DFS_DATA2_DIR/Static$STACKNAME/Logo$STACKNAME.png
	#cat /home/$CURRENTUSER/ImageMaker.py
	python3 /home/$CURRENTUSER/ImageMaker.py
	sudo rm -f /home/$CURRENTUSER/ImageMaker.py
	sudo rm -f /home/$CURRENTUSER/CoreFont.ttf
fi

sudo systemctl stop glusterd
sudo rm -rf /var/lib/glusterd/*
sudo rm -rf /etc/glusterfs/*
sudo rm -rf /var/log/glusterfs/*
sudo mkdir -p /etc/glusterfs && sudo rm -rf /etc/glusterfs/glusterd.vol
echo 'volume management
    type mgmt/glusterd
    option working-directory /var/lib/glusterd
    option transport-type socket
    option transport.socket.keepalive-time 10
    option transport.socket.keepalive-interval 2
    option transport.socket.read-fail-log off
    option transport.socket.listen-port 24007
    option ping-timeout 0
    option event-threads 1
#   option lock-timer 180
#   option transport.address-family inet6
    option base-port 49152
    option max-port  60999
end-volume' | sudo tee /etc/glusterfs/glusterd.vol

if [ -f /usr/sbin/glusterfs ]; then
	sudo systemctl restart glusterd
	sudo systemctl enable glusterd
fi

sudo mkdir -p /etc/docker && sudo rm -rf /etc/docker/daemon.json
if [ ! -f /opt/CLD ]; then
echo '{
  "data-root": "'"$DOCKER_DATA_DIR"'",
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "hosts": ["unix:///var/run/docker.sock"]
}' | sudo tee /etc/docker/daemon.json
else
echo '{
  "data-root": "'"$DOCKER_DATA_DIR"'",
  "exec-opts": ["native.cgroupdriver=systemd"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "hosts": ["unix:///var/run/docker.sock"]
}' | sudo tee /etc/docker/daemon.json
fi       
sudo usermod -a -G docker $CURRENTUSER

sudo rm -f /etc/systemd/system/docker.service
echo '[Unit]
Description=Docker Application Container Engine
Documentation=https://docs.docker.com
After=network-online.target firewalld.service
Wants=network-online.target

[Service]
Type=simple
ExecStart=/usr/bin/dockerd '"$TLSSTUFF"'--containerd=/run/containerd/containerd.sock
ExecReload=/bin/kill -s HUP $MAINPID
TimeoutSec=0
RestartSec=2
Restart=always
StartLimitBurst=3
StartLimitInterval=60s
LimitNOFILE=infinity
LimitNPROC=infinity
LimitCORE=infinity
TasksMax=infinity
Delegate=yes
KillMode=process

[Install]
WantedBy=multi-user.target' | sudo tee /etc/systemd/system/docker.service > /dev/null

if [[ "$THEOSCHOICE" == "E2E_UBU" ]]; then
	echo 'No Firewall'
else
	sudo firewall-cmd --zone=public --add-port=$PortainerAPort/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=$PortainerSPort/tcp --permanent

	#sudo firewall-cmd --zone=public --add-port=$VarahaPort1/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=$VarahaPort2/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=$VarahaPort3/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=$VarahaPort4/tcp --permanent

	sudo firewall-cmd --zone=public --add-port=$BDDPort1/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=$BDDPort2/tcp --permanent

	sudo firewall-cmd --zone=public --add-port=2377/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=7946/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=7946/udp --permanent
	sudo firewall-cmd --zone=public --add-port=4789/udp --permanent
	sudo firewall-cmd --zone=public --add-port=53/udp --permanent

	sudo firewall-cmd --zone=public --add-port=111/udp --permanent
	sudo firewall-cmd --zone=public --add-port=111/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=24007/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=24008/tcp --permanent
	#sudo firewall-cmd --zone=public --add-port=49152-60999/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=35000-65000/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=35000-65000/udp --permanent

	sudo firewall-cmd --zone=public --add-protocol=50 --permanent

	sudo firewall-cmd --zone=public --add-port=16746-19478/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=2049/tcp --permanent
	sudo firewall-cmd --zone=public --add-port=53/tcp --permanent
		        
	sudo firewall-cmd --reload
fi

if [ ! -f /opt/CLD ]; then
    echo 'Firewall On'
else
    if [[ "$THEOSCHOICE" == "E2E_UBU" ]]; then
        echo 'No Firewall'
    else
        sudo systemctl stop firewalld
        sudo systemctl disable firewalld
    fi
fi

sudo systemctl daemon-reload
sudo systemctl enable docker
sudo systemctl restart docker

#install_minio

sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
sudo rm -rf /root/.ssh/known_hosts
sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

sudo rm -f /home/$CURRENTUSER/SetUpHosts.sh
sudo rm -f /home/$CURRENTUSER/SetUpDocker.sh

sudo touch /opt/DSUDONE$STACKNAME
sudo chmod 777 /opt/DSUDONE$STACKNAME
sudo mv /home/$CURRENTUSER/DSULog$STACKNAME.out /opt/DSULog$STACKNAME.out
sudo chmod 777 /opt/DSULog$STACKNAME.out

