#!/bin/bash

THEK8SKUBESPHEREVERSION=$(curl -s https://api.github.com/repos/kubesphere/kubekey/releases/latest | grep tag_name | cut -d '"' -f 4)

STACKLINELENGTHY="-----------------------------------------------"

STACKSOFTWAREMASTERS=(2 3 5 6 8 9)

#VBOXGENERICUBUNTU="https://app.vagrantup.com/ubuntu/boxes/jammy64/versions/20240426.0.0/providers/virtualbox/unknown/vagrant.box"
VBOXGENERICUBUNTU="https://app.vagrantup.com/Minus1By12/boxes/MATSYA-VagVBox-Generic/versions/1.0.0/providers/virtualbox/unknown/vagrant.box"
#VBOXGENERICSTACKUBUNTU="vagrant-virtualbox-generic-ubuntu-2204.box"
VBOXGENERICSTACKUBUNTU="minus1by12-vagrant-virtualbox-generic-ubuntu-2204-v1-0-0.box"

ALLSTACKOPENPORTS=("Tcp├80├1002" "Tcp├443├1003" "Tcp├2377├1004" "Tcp├7946├1005" "Tcp├24007├1006" "Tcp├24008├1007" "Tcp├111├1008" "Tcp├2049├1009" "Tcp├53├1010" "Udp├7946├1011" "Udp├4789├1012" "Udp├53├1013" "Udp├111├1014" "Tcp├35000-65000├1015" "Tcp├16746-19478├1016" "Udp├35000-65000├1017")

#https://documentation.ubuntu.com/azure/en/latest/azure-how-to/instances/find-ubuntu-images/
AZUREOSCHOICE=("almalinux├almalinux-x86_64├9-gen2├latest" "Canonical├0001-com-ubuntu-server-jammy├22_04-lts-gen2├latest")
AWSOSCHOICE=("UBU├ubuntu" "AZL├ec2-user" "ALMA├ec2-user")
#https://cloud.google.com/compute/docs/machine-resource
#https://cloud.google.com/compute/docs/regions-zones
GCPOSCHOICE=("ROCKY├projects/rocky-linux-cloud/global/images/rocky-linux-9-optimized-gcp-v20240415" "ALMA├projects/almalinux-cloud/global/images/almalinux-9-v20221206" "UBU├projects/ubuntu-os-cloud/global/images/ubuntu-2204-jammy-v20240319")

declare -A CLUSTER_APPS_MAPPING
CLUSTER_APPS_MAPPING["BRAHMA"]="portainer/portainer-ce"
CLUSTER_APPS_MAPPING["VISHVAKARMA"]="portainer/agent"
CLUSTER_APPS_MAPPING["INDRA"]="haproxy"
CLUSTER_APPS_MAPPING["WEBSSH"]="wettyoss/wetty"
CLUSTER_APPS_MAPPING["CHITRAGUPTA1"]="guacamole/guacamole"
CLUSTER_APPS_MAPPING["CHITRAGUPTA2"]="guacamole/guacd"
CLUSTER_APPS_MAPPING["CHITRAGUPTA3"]="mysql"
CLUSTER_APPS_MAPPING["CHITRAGUPTA4"]="phpmyadmin"

declare -A CLUSTERAPPSMAPPING
CLUSTERAPPSMAPPING["BRAHMA"]="2.20.3"
CLUSTERAPPSMAPPING["VISHVAKARMA"]="2.20.3"
CLUSTERAPPSMAPPING["INDRA"]="3.0.2"
CLUSTERAPPSMAPPING["SeaweedFS"]="3.69"
CLUSTERAPPSMAPPING["WEBSSH"]="latest"
CLUSTERAPPSMAPPING["CHITRAGUPTA1"]="1.5.5"
CLUSTERAPPSMAPPING["CHITRAGUPTA2"]="1.5.5"
#CLUSTERAPPSMAPPING["CHITRAGUPTA3"]="5.7"
CLUSTERAPPSMAPPING["CHITRAGUPTA3"]="9.0.1"
CLUSTERAPPSMAPPING["CHITRAGUPTA4"]="5.2.1"

declare -A CLUSTER_MEMORYCORES_MAPPING
CLUSTER_MEMORYCORES_MAPPING["CHITRAGUPTA1"]="1024:1"
CLUSTER_MEMORYCORES_MAPPING["CHITRAGUPTA2"]="1024:1"
CLUSTER_MEMORYCORES_MAPPING["CHITRAGUPTA3"]="2048:2"
CLUSTER_MEMORYCORES_MAPPING["CHITRAGUPTA4"]="512:0.5"

THEWEBSSHIDLELIMIT="300"

ALLSTACKITEMSLIST="Eg: 1,3|3,6|6,3|4,7,8,9|7,8,9,4|8,9,4,7|9,4,7,8
$STACKLINELENGTHY 
(1) KubeSphere Installer	[KI]
(2) KubeSphere Master		[KM]
(3) KubeSphere Master (HA)	[KH]
(4) KubeSphere Worker		[KW]
(5) Spark Master		[SM]
(6) Spark Master (HA)		[SH]
(7) Spark Worker		[SW]
(8) ZooKeeper			[ZK]	
(9) Kafka Broker		[KB]	 
$STACKLINELENGTHY"

E2EPLANCHOICEFORCLUSTER="$STACKLINELENGTHY
C3-4vCPU-8RAM-100DISK-C3.128GB-AlmaLinux-9
M3-4vCPU-32RAM-100DISK-M3.32GB-AlmaLinux-9

C3-4vCPU-8RAM-100DISK-C3.128GB-AlmaLinux-8
M3-4vCPU-32RAM-100DISK-M3.32GB-AlmaLinux-8

C3-4vCPU-8RAM-100DISK-C3.128GB-CentOS-7
M3-4vCPU-32RAM-100DISK-M3.32GB-CentOS-7

C3-4vCPU-8RAM-100DISK-C3.128GB-Ubuntu22.04
M3-4vCPU-32RAM-100DISK-M3.32GB-Ubuntu22.04	 
$STACKLINELENGTHY"

E2EOSIMAGECHOICEFORCLUSTER="$STACKLINELENGTHY
AlmaLinux-9-Distro
AlmaLinux-8-Distro
CentOS-7-Distro
Ubuntu-22.04-Distro	 
$STACKLINELENGTHY"

declare -A STACKITEMSMAPPING
STACKITEMSMAPPING[1]="KI"
STACKITEMSMAPPING[2]="KM"
STACKITEMSMAPPING[3]="KH"
STACKITEMSMAPPING[4]="KW"
STACKITEMSMAPPING[5]="SM"
STACKITEMSMAPPING[6]="SH"
STACKITEMSMAPPING[7]="SW"
STACKITEMSMAPPING[8]="ZK"
STACKITEMSMAPPING[9]="KB"

declare -A STACKITEMSVERSIONMAPPING
STACKITEMSVERSIONMAPPING[1]=""
STACKITEMSVERSIONMAPPING[2]="v1.22.12|v3.4.1"
STACKITEMSVERSIONMAPPING[3]="v1.22.12|v3.4.1"
STACKITEMSVERSIONMAPPING[4]=""
STACKITEMSVERSIONMAPPING[5]="3.5.0"
STACKITEMSVERSIONMAPPING[6]="3.5.0"
STACKITEMSVERSIONMAPPING[7]=""
STACKITEMSVERSIONMAPPING[8]="3.9.1"
STACKITEMSVERSIONMAPPING[9]="7.5.2"

declare -A STACKITEMSVERSIONQMAPPING
STACKITEMSVERSIONQMAPPING[1]=""
STACKITEMSVERSIONQMAPPING[2]="Kubernetes+KubeSphere Version 		> "
STACKITEMSVERSIONQMAPPING[3]="Kubernetes+KubeSphere Version 		> "
STACKITEMSVERSIONQMAPPING[4]=""
STACKITEMSVERSIONQMAPPING[5]="Spark Version 				> "
STACKITEMSVERSIONQMAPPING[6]="Spark Version 				> "
STACKITEMSVERSIONQMAPPING[7]=""
STACKITEMSVERSIONQMAPPING[8]="ZooKeeper Version 			> "
STACKITEMSVERSIONQMAPPING[9]="Kafka Version 				> "

GetCodeForNodeDelete() {
	CLOUDANDINSTANCEID="$1"
	CLOUD=${CLOUDANDINSTANCEID:0:3}
	INSTANCEID=${CLOUDANDINSTANCEID:3}
	
	if [ $CLOUD == "e2e" ] ; then
		BLABLABLA=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		echo "
C$BLABLABLA=\$(curl -X DELETE 'https://api.e2enetworks.com/myaccount/api/v1/nodes/$INSTANCEID/?apikey=$2' -H 'Authorization: Bearer $3')" | sudo tee -a $4 > /dev/null		
	fi
}

GetCodeForHostAddition() {
	XYZTHEIP="$1"
	ABCTHEHOSTNAME="$2"
	PQRTHEDYNASCRIPTFILE="$3"
	
	JKLHOSTTRANDOM=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	sudo cp $BASE/Resources/HostFileUpdateTemplate $BASE/tmp/$JKLHOSTTRANDOM
	sudo chmod 777 $BASE/tmp/$JKLHOSTTRANDOM
	sed -i -e "s/THEHOST1REPLACENAME/$ABCTHEHOSTNAME/g" $BASE/tmp/$JKLHOSTTRANDOM
	sed -i -e "s/THE1REPLACEIPADDRESS/$XYZTHEIP/g" $BASE/tmp/$JKLHOSTTRANDOM
	
	cat $BASE/tmp/$JKLHOSTTRANDOM >> $PQRTHEDYNASCRIPTFILE
	
	sudo rm -rf $BASE/tmp/$JKLHOSTTRANDOM
}

GetCodeForConfigAddition() {
	XYZTHE1IP="$1"
	ABCTHEHOST1NAME="$2"
	POIUSERNAME="$3"
	MNBPWD="$4"
	VBNVER="$5"
	PQRTHEDYNA1SCRIPTFILE="$6"
	GHJCONFIGFILE="$7"
		
	JKLHOSTT1RANDOM=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	sudo cp $BASE/Resources/KubeSphereConfigUpdateTemplate $BASE/tmp/$JKLHOSTT1RANDOM
	sudo chmod 777 $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s/THE_1IPADDRESS/$XYZTHE1IP/g" $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s/THEHOST_1NAME/$ABCTHEHOST1NAME/g" $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s/THEHOST_1UNAME/$POIUSERNAME/g" $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s/THEHOST_1UPWD/$MNBPWD/g" $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s/STACK_1MAPPING/$VBNVER/g" $BASE/tmp/$JKLHOSTT1RANDOM
	sed -i -e "s#THEFILE_1NAME#$GHJCONFIGFILE#g" $BASE/tmp/$JKLHOSTT1RANDOM
			
	cat $BASE/tmp/$JKLHOSTT1RANDOM >> $PQRTHEDYNA1SCRIPTFILE
	
	sudo rm -rf $BASE/tmp/$JKLHOSTT1RANDOM
}

: <<'END_COMMENT'
NARASIMHA() {
    local action="$1"
    
    if [ $action == "encrypt" ] ; then
        local plaintext="$2"
        local key="$3"    
        local encrypted=$(echo -n "$plaintext" | openssl enc -aes-256-cbc -a -pbkdf2 -k "$key")
        echo "$encrypted"
    fi
    
    if [ $action == "decrypt" ] ; then
        local encrypted="$2"
        local key="$3"
        local decrypted=$(echo "$encrypted" | openssl enc -aes-256-cbc -a -d -pbkdf2 -k "$key")
        echo "$decrypted"    
    fi        
}
END_COMMENT

# [NARASIMHA : Network Access Restricted Augmented Security Infrastructure Mitigating Hazardous Attacks]
NARASIMHA() {
    local action="$1"
    
    if [ "$action" == "encrypt" ]; then
        local plaintext="$2"
        local key="$3"
        local encrypted=$(echo -n "$plaintext" | openssl enc -aes-256-cbc -pbkdf2 -k "$key" | base64 -w 0)
        echo "$encrypted"
    fi
    
    if [ "$action" == "decrypt" ]; then
        local encrypted="$2"
        local key="$3"
        local decrypted=$(echo "$encrypted" | base64 -d | openssl enc -aes-256-cbc -d -pbkdf2 -k "$key")
        echo "$decrypted"    
    fi 
    
    if [ "$action" == "newkey" ]; then
	DIFF=$((600000-500000+1))
	R=$(($(($RANDOM%$DIFF))+500000))
	RANDOMKEY=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	RKEY1=${RANDOMKEY:0:7}
	RKEY2=${RANDOMKEY:7:8}
	RANDOMKEY="$RKEY1$R$RKEY2"
        echo "$RANDOMKEY"    
    fi           
}

GETMEUNIQUEIPSFAST() {
	NUM_IPS="$1"
	INTERFACE="$2"
	
	# Network interface and required IPs
	#INTERFACE="enx7cc2c647669e"
	#NUM_IPS=10
	FL_1=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1) && touch $BASE/tmp/$FL_1 && sudo chmod 777 $BASE/tmp/$FL_1
	FL_2=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1) && touch $BASE/tmp/$FL_2 && sudo chmod 777 $BASE/tmp/$FL_2
	
	# Get the subnet of the network interface
	SUBNET=$(ip -o -f inet addr show $INTERFACE | awk '{print $4}')

	# Scan for active IPs
	nmap -sn $SUBNET -oG - | awk '/Up$/{print $2}' > $BASE/tmp/$FL_1

	# Generate the list of all possible IPs in the subnet
	nmap -sL $SUBNET | awk '/Nmap scan report/{print $NF}' > $BASE/tmp/$FL_2

	# Find unused IPs and omit 192.168.0.0 and 192.168.0.1
	UNUSED_IPS=$(comm -23 <(sort $BASE/tmp/$FL_2) <(sort $BASE/tmp/$FL_1) | grep -v -E '192\.168\.0\.0|192\.168\.0\.1')

	# Randomly pick the required number of IPs and generate a comma-separated string
	SELECTED_IPS=$(echo "$UNUSED_IPS" | shuf -n $NUM_IPS | paste -sd "," -)

	sudo rm -f $BASE/tmp/$FL_1
	sudo rm -f $BASE/tmp/$FL_2
	
	#echo "Unused IPs:"
	echo "$SELECTED_IPS"	
}

GETMEUNIQUEIPS() {
	final1ips=()

	required_ips="$1"
	the1nic="$2"
	thenameofthefilewhereGETMEUNIQUEIPSwillwriteresult="$3"
	required_1ips="$required_ips"
	required_1ips_allowed="10"
	
	if [ "$required_1ips" -gt "$required_1ips_allowed" ]; then
		required_1ips="8"
	fi
	#echo $required_1ips
	while [ ${#final1ips[@]} -lt $required_ips ]; do
		start_range=$((RANDOM % 231 + 10))
		end_range=$((start_range + 10))
		thenameofthefilewhereipscannerwillwriteresult=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		$BASE/Scripts/IPScanner.sh "$the1nic■$start_range■$end_range■$required_1ips■$BASE/tmp/$thenameofthefilewhereipscannerwillwriteresult"
		if [ -e "$BASE/tmp/$thenameofthefilewhereipscannerwillwriteresult" ]; then result=$(head -n 1 $BASE/tmp/$thenameofthefilewhereipscannerwillwriteresult); fi;
		sudo rm -f $BASE/tmp/$thenameofthefilewhereipscannerwillwriteresult
		#echo "$start_range : $end_range : => $result"
		IFS=',' read -r -a ips <<< "$result"
		
		for ip in "${ips[@]}"; do
			#echo $ip
			if [[ ! " ${final1ips[@]} " =~ " $ip " ]]; then			
				final1ips+=("$ip")
			fi
		done
		#echo "----------"
		#echo "${final1ips[@]}"
		#echo "----------"
		#echo "${#final1ips[@]}"
		#echo "----------"				
	done

	trimmed1_ips=()
	for ((i = 0; i < required_ips && i < ${#final1ips[@]}; i++)); do
		trimmed1_ips+=("${final1ips[i]}")
	done
	
	IPAs1String=$(IFS=,; echo "${trimmed1_ips[*]}")
	
	#echo "$IPAs1String"
	echo "$IPAs1String" | sudo tee $thenameofthefilewhereGETMEUNIQUEIPSwillwriteresult > /dev/null && sudo chmod 777 $thenameofthefilewhereGETMEUNIQUEIPSwillwriteresult
}

CSVFILE_ENC_DYC() {
	FILE_PATH="$1"
	reqcol="$2"
	enccolstatus="$3"
	enccolvalstatus="$4"
	whattodo="$5"
	thereqkey="$6"
	isheader="$7"
	encdeccol="$8"
	TMP_FILE="$9"
	#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "$FILE_PATH : $reqcol: $enccolstatus: $enccolvalstatus: $whattodo: $thereqkey: $isheader: $encdeccol $TMP_FILE:"
	#echo "CSVFILE_ENC_DYC Progress" "$FILE_PATH : $reqcol : $enccolstatus : $enccolvalstatus : $whattodo : $thereqkey : $isheader : $encdeccol : $TMP_FILE:" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
	while IFS=, read -r line; do
	    IFS=',' read -r -a columns <<< "$line"

	    if [ "$isheader" -eq 1 ]; then
		isheader=0
	    else
	    	    CHECKCURSTATUS=""
		    if [ "$encdeccol" == "" ] ; then
		    	CHECKCURSTATUS=""
		    else
		    	CHECKCURSTATUS="${columns[$((encdeccol-1))]}"
		    fi	    
		    #echo "CHECKCURSTATUS : $CHECKCURSTATUS"
		    #notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "CHECKCURSTATUS : $CHECKCURSTATUS"
		    #echo "CSVFILE_ENC_DYC Progress" "CHECKCURSTATUS : $CHECKCURSTATUS" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
		    for col in $(echo "$reqcol" | tr ',' ' '); do
			col_value="${columns[$((col-1))]}"
			#echo "col_value : $col_value"
			#echo "CSVFILE_ENC_DYC Progress" "COL NO : $col  VAL : $col_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			if [ "$col_value" == "" ] || [ "$col_value" == "\"\"" ] ; then
				columns[$((col-1))]=$col_value
				#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT1"
				#echo "CSVFILE_ENC_DYC Progress" "POINT1" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			else
			    if [ "$CHECKCURSTATUS" == "" ] ; then
			        #echo "CSVFILE_ENC_DYC Progress" "CAME FOR SELECTION : '$CHECKCURSTATUS' : '$whattodo' : '$thereqkey'" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	thereq_value=$(NARASIMHA "$whattodo" "$col_value" "$thereqkey")
			    	columns[$((col-1))]=$thereq_value
		    		#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT6"
		    		#echo "CSVFILE_ENC_DYC Progress" "POINT6 $thereq_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null			    	
			    else
			    	#echo "CSVFILE_ENC_DYC Progress" "CAME FOR SELECTION2 : '$CHECKCURSTATUS' : '$whattodo' : '$thereqkey'" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	if [ "$CHECKCURSTATUS" == "N" ] && [ "$whattodo" == "encrypt" ]; then
			    		thereq_value=$(NARASIMHA "$whattodo" "$col_value" "$thereqkey")
			    		columns[$((col-1))]=$thereq_value
			    		#echo "whattodo : $whattodo  CHECKCURSTATUS : $CHECKCURSTATUS"
			    		#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT2"
			    		#echo "CSVFILE_ENC_DYC Progress" "POINT2 ::: NARASIMHA : $whattodo : $col_value : $thereqkey ::: $thereq_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	fi
			    	if [ "$CHECKCURSTATUS" == "N" ] && [ "$whattodo" == "decrypt" ]; then
			    		columns[$((col-1))]=$col_value
			    		#echo "whattodo : $whattodo  CHECKCURSTATUS : $CHECKCURSTATUS"
			    		#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT3"
			    		#echo "CSVFILE_ENC_DYC Progress" "POINT3 $col_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	fi
			    	if [ "$CHECKCURSTATUS" == "Y" ] && [ "$whattodo" == "encrypt" ]; then
			    		columns[$((col-1))]=$col_value
			    		#echo "whattodo : $whattodo  CHECKCURSTATUS : $CHECKCURSTATUS"
			    		#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT4"
			    		#echo "CSVFILE_ENC_DYC Progress" "POINT4 $col_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	fi
			    	if [ "$CHECKCURSTATUS" == "Y" ] && [ "$whattodo" == "decrypt" ]; then
			    		thereq_value=$(NARASIMHA "$whattodo" "$col_value" "$thereqkey")
			    		columns[$((col-1))]=$thereq_value
			    		#echo "whattodo : $whattodo  CHECKCURSTATUS : $CHECKCURSTATUS"
			    		#notify-send -t 5000 "CSVFILE_ENC_DYC Progress" "POINT5"
			    		#echo "CSVFILE_ENC_DYC Progress" "POINT5 $thereq_value" | sudo tee -a /home/prathamos/Downloads/log > /dev/null
			    	fi			    				    	
			    fi
			fi
		    done
		    if [ "$enccolstatus" == "" ] ; then
		    	ABC="XYZ"
		    else
		    	columns[$((enccolstatus-1))]=$enccolvalstatus
		    fi
	    fi
	    	
	    modified_line=$(IFS=,; echo "${columns[*]}")
	    echo "$modified_line" >> "$TMP_FILE"

	done < "$FILE_PATH"

	#mv "$TMP_FILE" "$FILE_PATH"
}

# [PARASHURAMA : Purge Alter Reallocate Any System Hardware Utility Resource Asset Machine Attribute]
PARASHURAMA() {
	local theaction="$1"

	if [ "$theaction" == "VVBDR" ]; then
		#thevisionkey="qtofCcq519714UdVnqd0j"
		#thepemfile="/opt/Matsya/Output/Pem/op-Scope656-140524185243.pem"
		#scopeconfig="op-Scope656-140524185243-192-168-0-226-ID204"
		#machineip="192.168.0.226"
		#thebase="/opt/Matsya"
		#thecurrent1user="prathamos"
		thevisionkey="$2"
		thepemfile="$3"
		scopeconfig="$4"
		machineip="$5"
		thebase="$6"
		thecurrent1user="$7"
		
		pemeexists="No"
		pemexists="No"
		thepemefile="$thepemfile""e"
		theconfigpath=$(sudo find /opt/Matsya/VagVBox -name $scopeconfig)

		if [ -e "$thepemfile" ]; then pemexists="Yes"; fi
		if [ -e "$thepemefile" ]; then pemeexists="Yes"; fi

		if [ "$pemeexists" == "Yes" ] ; then
			sudo rm -f $thepemfile
			ITER=${thevisionkey:7:6}
			RANDOMSECFILENAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
			sudo cp $thepemefile $thebase/tmp/$RANDOMSECFILENAME
			sudo chown $thecurrent1user:$thecurrent1user $thebase/tmp/$RANDOMSECFILENAME
			sudo chmod u=rwx,g=rwx,o=rwx $thebase/tmp/$RANDOMSECFILENAME
			REALSECRETSFILENAME=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
			openssl enc -a -d -aes-256-cbc -pbkdf2 -iter $ITER -k $thevisionkey -in $thebase/tmp/$RANDOMSECFILENAME -out $thebase/tmp/$REALSECRETSFILENAME
			sudo chown $thecurrent1user:$thecurrent1user $thebase/tmp/$REALSECRETSFILENAME
			sudo chmod u=rwx,g=rwx,o=rwx $thebase/tmp/$REALSECRETSFILENAME
			sudo mv $thebase/tmp/$REALSECRETSFILENAME $thepemfile
			sudo rm -rf $thebase/tmp/$RANDOMSECFILENAME
			sudo rm -rf /root/.bash_history
			sudo rm -rf /home/$thecurrent1user/.bash_history		
		fi

		sudo chmod 400 $thepemfile
		sudo chown $thecurrent1user:$thecurrent1user $thepemfile
		sudo -H -u root bash -c "pushd $theconfigpath && sudo vagrant halt && popd" >/dev/null 2>&1
		sudo -H -u root bash -c "pushd $theconfigpath && sudo vagrant destroy -f && popd" >/dev/null 2>&1
		sudo rm -rf $theconfigpath
		if [ "$pemexists" == "No" ] ; then
			sudo rm -f $thepemfile
		fi
		count=0
		TNDF1=""
		for ((i=1; i<=2; i++)); do
		    if ping -c 1 "$machineip" >/dev/null; then
			count=$((count + 1))
		    fi
		done
		if [ $count -gt 0 ]; then
		    TNDF1="A"
		else
		    TNDF1="Y"
		fi
		echo "$TNDF1"			
	fi
		
	if [ "$theaction" == "VVBD" ]; then
		local VMParent="$2"
		local PUserName="$3"
		local PPort="$4"
		local PPassword="$5"
		local PPEM="$6"
		local MPPEM="$7"
		local MRPPEM="$8"
		local MRNPPPEM="$9"
		local FPTH="${10}"
		local TMCHIP="${11}"
		local THE1VISION1KEY="${12}"
		local thecurrentbase1="${13}"
		local thecurrentuser1="${14}"
		#PARASHURAMA "VVBD" "192.168.0.102" "prathamos" "22" "130513" "NA" "/opt/Matsya/Output/Pem/op-Scope656-140524185243.pem" "op-Scope656-140524185243.pem" "/home/prathamos/Downloads" "op-Scope656-140524185243-192-168-0-226-ID204" "192.168.0.226" "qtofCcq519714UdVnqd0j"					
		if [ "$PPEM" == "NA" ] ; then
			TNDF=$(sshpass -p "$PPassword" ssh -p "$PPort" -o StrictHostKeyChecking=no "$PUserName@$VMParent" 'source '"$thecurrentbase1"'/Resources/StackVersioningAndMisc; \
TNDF1=$(PARASHURAMA "VVBDR" "'"$THE1VISION1KEY"'" "'"$MPPEM"'" "'"$FPTH"'" "'"$TMCHIP"'" "'"$thecurrentbase1"'" "'"$thecurrentuser1"'"); \
echo "$TNDF1"'
			)					
		else
			TNDF=$(ssh -p "$PPort" -o StrictHostKeyChecking=no -i "$PPEM" "$PUserName@$VMParent" 'source '"$thecurrentbase1"'/Resources/StackVersioningAndMisc; \
TNDF1=$(PARASHURAMA "VVBDR" "'"$THE1VISION1KEY"'" "'"$MPPEM"'" "'"$FPTH"'" "'"$TMCHIP"'" "'"$thecurrentbase1"'" "'"$thecurrentuser1"'"); \
echo "$TNDF1"'
			)					
		fi
		 
		echo "$TNDF" 
	fi     
}

