#!/bin/bash

THELISTOFIPS="THEIPLIST"
THEINTERFACE="THENIC"
IFS='|' read -r -a VARNA <<< "$THELISTOFIPS"

# Define WireGuard configuration
WG_CONFIG_DIR="THEWGPATH"
WG_CONFIG_FILE="${WG_CONFIG_DIR}/$THEINTERFACE.conf"
THEPATH="$WG_CONFIG_DIR/$THEINTERFACE"
WG_INTERFACE="$THEINTERFACE"
WG_PORT="THEKRISHNAPORT"
WG_SUBNET="THESUBNET.0/24"

# SSH run command
ssh_run() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local cmd="$5"
    ssh -o StrictHostKeyChecking=no -i "${pem_file}" "${user}@${ip}" -p "${port}" "${cmd}"
}

# SCP command
scp_run() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local src="$5"
    local dest="$6"
    scp -o StrictHostKeyChecking=no -i "${pem_file}" -P "${port}" "${src}" "${user}@${ip}:${dest}"
}

# Install WireGuard
install_wireguard() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "echo '1' && hostname && sudo apt-get update -y && sudo apt-get install -y wireguard"
}

# Generate WireGuard keys on remote server
generate_keys() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "echo '2' && hostname && sudo rm -f ""$THEPATH""privatekey && sudo rm -f ""$THEPATH""publickey && umask 077 && sudo wg genkey | sudo tee ""$THEPATH""privatekey | sudo wg pubkey | sudo tee ""$THEPATH""publickey && sudo cat ""$THEPATH""privatekey && sudo cat ""$THEPATH""publickey"
}

# Retrieve WireGuard keys from remote server
get_keys() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    PRIVATE_KEY=$(ssh_run "$ip" "$port" "$pem_file" "$user" "sudo cat ""$THEPATH""privatekey")
    PUBLIC_KEY=$(ssh_run "$ip" "$port" "$pem_file" "$user" "sudo cat ""$THEPATH""publickey")
}

# Configure WireGuard on remote server
configure_wireguard() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local private_key="$5"
    local public_key="$6"
    
    local conf="[Interface]
Address = THESUBNET.$((i+1))/24
PrivateKey = $PRIVATE_KEY
ListenPort = $WG_PORT
"
    local j=0
    for peer in "${VARNA[@]}"; do
        if [ "$i" -ne "$j" ]; then
            IFS=',' read -r PEER_IP PEER_PORT PEER_PEM PEER_USER <<< "$peer"
            PEER_PUBLIC_KEY=$(ssh_run "$PEER_IP" "$PEER_PORT" "$PEER_PEM" "$PEER_USER" "sudo cat ""$THEPATH""publickey")
            conf+="
[Peer]
PublicKey = $PEER_PUBLIC_KEY
Endpoint = $PEER_IP:$WG_PORT
AllowedIPs = THESUBNET.$((j+1))/32
PersistentKeepalive = 25
"
        fi
        ((j++))
    done
   
    echo "$conf" > $THEINTERFACE.conf
    scp_run "$ip" "$port" "$pem_file" "$user" $THEINTERFACE.conf "/tmp/$THEINTERFACE.conf"
    rm -f $THEINTERFACE.conf
    ssh_run "$ip" "$port" "$pem_file" "$user" "sudo mv /tmp/$THEINTERFACE.conf ${WG_CONFIG_FILE} && sudo chmod 600 ${WG_CONFIG_FILE}"
    ssh_run "$ip" "$port" "$pem_file" "$user" "sudo systemctl enable wg-quick@${WG_INTERFACE} && sudo systemctl restart wg-quick@${WG_INTERFACE} && sudo systemctl status wg-quick@${WG_INTERFACE}"
}

# Ensure IP forwarding is enabled
enable_ip_forwarding() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "sudo sysctl -w net.ipv4.ip_forward=1 && sudo sysctl -w net.ipv6.conf.all.forwarding=1 && sudo sysctl -p"
}

# Function to check and remove lock files
remove_locks() {
    echo "Checking and removing lock files..."
    sudo rm -f /var/lib/dpkg/lock-frontend
    sudo rm -f /var/lib/dpkg/lock
}

# Function to check and terminate running apt or dpkg processes
terminate_processes() {
    echo "Checking for running apt or dpkg processes..."
    pids=$(ps aux | grep -E 'apt|dpkg' | grep -v grep | awk '{print $2}')
    if [ -z "$pids" ]; then
        echo "No running apt or dpkg processes found."
    else
        echo "Terminating running apt or dpkg processes..."
        for pid in $pids; do
            sudo kill -9 $pid
            echo "Terminated process with PID: $pid"
        done
    fi
}

# Function to reconfigure dpkg
reconfigure_dpkg() {
    echo "Reconfiguring dpkg..."
    sudo dpkg --configure -a
}

# Function to update package list
update_package_list() {
    echo "Updating package list..."
    sudo apt-get update -y
}

remove_locks
terminate_processes
remove_locks
reconfigure_dpkg
update_package_list
echo "System is ready for package installation..."

# Main script execution
for ((i=0; i<${#VARNA[@]}; i++)); do
    IFS=',' read -r IP PORT PEM_FILE USER <<< "${VARNA[$i]}"
    
    # Install WireGuard
    install_wireguard "$IP" "$PORT" "$PEM_FILE" "$USER"
    
    # Generate keys
    generate_keys "$IP" "$PORT" "$PEM_FILE" "$USER"
done
for ((i=0; i<${#VARNA[@]}; i++)); do
    IFS=',' read -r IP PORT PEM_FILE USER <<< "${VARNA[$i]}"
        
    # Retrieve keys
    get_keys "$IP" "$PORT" "$PEM_FILE" "$USER"
    
    # Configure WireGuard
    configure_wireguard "$IP" "$PORT" "$PEM_FILE" "$USER" "$PRIVATE_KEY" "$PUBLIC_KEY"
       
    # Enable IP forwarding
    enable_ip_forwarding "$IP" "$PORT" "$PEM_FILE" "$USER"    
done

echo "WireGuard VPN setup complete."

