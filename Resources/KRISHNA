#!/bin/bash

BASE="/opt/Matsya"

ADMIN_PASSWORD="$1"

THENATUREOFTHISRUN="THENATUREOFTHIS_RUN"
VPNENCFILEPATH="VPNENC_FILEPATH"

if [ "$THENATUREOFTHISRUN" == "FIRSTRUN" ] ; then
	THELISTOFIPS="THEIPLIST"
	THEINTERFACE="THENIC"
	WG_CONFIG_DIR="THEWGPATH"
	WG_CONFIG_FILE="${WG_CONFIG_DIR}/$THEINTERFACE.conf"
	THEPATH="$WG_CONFIG_DIR/$THEINTERFACE"
	WG_INTERFACE="$THEINTERFACE"
	WG_PORT="THEKRISHNAPORT"
	WG_SUBNET="THESUBNET.0/24"
	IFS='|' read -r -a VARNA <<< "$THELISTOFIPS"
	IFS='|' read -r -a VAR_NA <<< "$THELISTOFIPS"
	THE_SUB_NET="THESUBNET"	
fi

if [ "$THENATUREOFTHISRUN" == "RECURRING" ] ; then
	TMP_RNDM_VPN1ENC=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)	
	$BASE/Scripts/SecretsFile-Decrypter "$VPNENCFILEPATH├1├1├$BASE/tmp/$TMP_RNDM_VPN1ENC├$ADMIN_PASSWORD"
	sudo chmod 777 $BASE/tmp/$TMP_RNDM_VPN1ENC
	THEEXISTVPNCONTENT=$(head -n 1 $BASE/tmp/$TMP_RNDM_VPN1ENC)
	sudo rm -f $BASE/tmp/$TMP_RNDM_VPN1ENC
	
	IFS='■' read -r -a TEC5B <<< $THEEXISTVPNCONTENT
	THEINTERFACE="${TEC5B[0]}"
	WG_CONFIG_DIR="${TEC5B[1]}"
	WG_CONFIG_FILE="${WG_CONFIG_DIR}/$THEINTERFACE.conf"
	THEPATH="$WG_CONFIG_DIR/$THEINTERFACE"
	WG_INTERFACE="$THEINTERFACE"
	WG_PORT="${TEC5B[2]}"
	WG_SUBNET="${TEC5B[3]}"".0/24"
	THE_SUB_NET="${TEC5B[3]}"
	THECOMPLETEIPS="${TEC5B[4]}"
	THELISTOFIPS=$(echo "$THECOMPLETEIPS" | awk -F '¤' '{print $NF}')
	IFS='|' read -r -a VARNA <<< "$THELISTOFIPS"
	
	declare -a SAMPOORNA_IPS
	IFS='¤' read -r -a THELISTOF_IPS <<< "$THECOMPLETEIPS"
	for part in "${THELISTOF_IPS[@]}"; do
	  IFS='|' read -r -a VA1RNA <<< "$part"
	  for item in "${VA1RNA[@]}"; do
	    IFS=',' read -r ip _ <<< "$item"
	    SAMPOORNA_IPS+=("$ip")
	  done
	done
	echo "SAMPOORNA_IPS : ${SAMPOORNA_IPS[@]}"
	
	newlistofips="${THECOMPLETEIPS//¤/|}"
	IFS='|' read -r -a VAR_NA <<< "$newlistofips"				
fi

# SSH run command
ssh_run() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local cmd="$5"
    ssh -o StrictHostKeyChecking=no -i "${pem_file}" "${user}@${ip}" -p "${port}" "${cmd}"
}

# SCP command
scp_run() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local src="$5"
    local dest="$6"
    scp -o StrictHostKeyChecking=no -i "${pem_file}" -P "${port}" "${src}" "${user}@${ip}:${dest}"
}

# Install WireGuard
install_wireguard() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "echo '1' && hostname && sudo apt-get update -y && sudo apt-get install -y wireguard"
}

# Generate WireGuard keys on remote server
generate_keys() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "echo '2' && hostname && sudo rm -f ""$THEPATH""privatekey && sudo rm -f ""$THEPATH""publickey && umask 077 && sudo wg genkey | sudo tee ""$THEPATH""privatekey | sudo wg pubkey | sudo tee ""$THEPATH""publickey && sudo cat ""$THEPATH""privatekey && sudo cat ""$THEPATH""publickey"
}

# Retrieve WireGuard keys from remote server
get_keys() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    PRIVATE_KEY=$(ssh_run "$ip" "$port" "$pem_file" "$user" "sudo cat ""$THEPATH""privatekey")
    PUBLIC_KEY=$(ssh_run "$ip" "$port" "$pem_file" "$user" "sudo cat ""$THEPATH""publickey")
}

# Configure WireGuard on remote server
configure_wireguard() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    local private_key="$5"
    local public_key="$6"
    
    local conf="[Interface]
Address = $THE_SUB_NET.$((i+1))/24
PrivateKey = $PRIVATE_KEY
ListenPort = $WG_PORT
"
    local j=0
    for peer in "${VAR_NA[@]}"; do
        if [ "$i" -ne "$j" ]; then
            IFS=',' read -r PEER_IP PEER_PORT PEER_PEM PEER_USER <<< "$peer"
            if ping -c 5 "$PEER_IP" > /dev/null; then
		    PEER_PUBLIC_KEY=$(ssh_run "$PEER_IP" "$PEER_PORT" "$PEER_PEM" "$PEER_USER" "sudo cat ""$THEPATH""publickey")
		    conf+="
[Peer]
PublicKey = $PEER_PUBLIC_KEY
Endpoint = $PEER_IP:$WG_PORT
AllowedIPs = $THE_SUB_NET.$((j+1))/32
PersistentKeepalive = 25
"

		    if [ "$THENATUREOFTHISRUN" == "RECURRING" ] ; then
			IP1_EXISTS="N"	
			for existing_ip in "${NEWVPN_IPS[@]}"; do
				if [[ "$PEER_IP" == "$existing_ip" ]]; then
				    IP1_EXISTS="Y"
				    break
				fi
			done
			IP2_EXISTS="N"	
			for existing_ip in "${NEWVPN_IPS[@]}"; do
				if [[ "$ip" == "$existing_ip" ]]; then
				    IP2_EXISTS="Y"
				    break
				fi
			done			
			if [ "$IP1_EXISTS" == "Y" ] ; then
				if [ "$IP2_EXISTS" == "N" ] ; then
			    		if ping -c 5 "$ip" > /dev/null; then
			    			ssh_run "$ip" "$port" "$pem_file" "$user" "sudo wg set $WG_INTERFACE peer $PEER_PUBLIC_KEY allowed-ips $THE_SUB_NET.$((j+1))/32 persistent-keepalive 25"
			    		else
			    			echo "IP $ip Not Pinging For Dynamic Conf Update..."
			    		fi			
				fi
			fi 		
		    fi
	    else
	    	echo "IP $PEER_IP Not Pinging For VPN Publickey Download..."
            fi		
        fi
        ((j++))
    done
   
    echo "$conf" > $THEINTERFACE.conf
    if ping -c 5 "$ip" > /dev/null; then
    	scp_run "$ip" "$port" "$pem_file" "$user" $THEINTERFACE.conf "/tmp/$THEINTERFACE.conf"
    	ssh_run "$ip" "$port" "$pem_file" "$user" "sudo mv /tmp/$THEINTERFACE.conf ${WG_CONFIG_FILE} && sudo chmod 600 ${WG_CONFIG_FILE}"
    else
    	echo "IP $ip Not Pinging For VPN Conf Copy..."
    fi
    rm -f $THEINTERFACE.conf
        
    if [ "$THENATUREOFTHISRUN" == "FIRSTRUN" ] ; then
    	ssh_run "$ip" "$port" "$pem_file" "$user" "sudo systemctl enable wg-quick@${WG_INTERFACE} && sudo systemctl restart wg-quick@${WG_INTERFACE} && sudo systemctl status wg-quick@${WG_INTERFACE}"
    fi
    
    if [ "$THENATUREOFTHISRUN" == "RECURRING" ] ; then
	IP_EXISTS="N"	
	for existing_ip in "${NEWVPN_IPS[@]}"; do
		if [[ "$ip" == "$existing_ip" ]]; then
		    IP_EXISTS="Y"
		    break
		fi
	done   
    	if [[ "$IP_EXISTS" == "Y" ]]; then
    		ssh_run "$ip" "$port" "$pem_file" "$user" "sudo systemctl enable wg-quick@${WG_INTERFACE} && sudo systemctl restart wg-quick@${WG_INTERFACE} && sudo systemctl status wg-quick@${WG_INTERFACE}"    	
    	fi
    fi    
}

# Ensure IP forwarding is enabled
enable_ip_forwarding() {
    local ip="$1"
    local port="$2"
    local pem_file="$3"
    local user="$4"
    ssh_run "$ip" "$port" "$pem_file" "$user" "sudo sysctl -w net.ipv4.ip_forward=1 && sudo sysctl -w net.ipv6.conf.all.forwarding=1 && sudo sysctl -p"
}

# Function to check and remove lock files
remove_locks() {
    echo "Checking and removing lock files..."
    sudo rm -f /var/lib/dpkg/lock-frontend
    sudo rm -f /var/lib/dpkg/lock
}

# Function to check and terminate running apt or dpkg processes
terminate_processes() {
    echo "Checking for running apt or dpkg processes..."
    pids=$(ps aux | grep -E 'apt|dpkg' | grep -v grep | awk '{print $2}')
    if [ -z "$pids" ]; then
        echo "No running apt or dpkg processes found."
    else
        echo "Terminating running apt or dpkg processes..."
        for pid in $pids; do
            sudo kill -9 $pid
            echo "Terminated process with PID: $pid"
        done
    fi
}

# Function to reconfigure dpkg
reconfigure_dpkg() {
    echo "Reconfiguring dpkg..."
    sudo dpkg --configure -a
}

# Function to update package list
update_package_list() {
    echo "Updating package list..."
    sudo apt-get update -y
}

remove_locks
terminate_processes
remove_locks
reconfigure_dpkg
update_package_list
echo "System is ready for package installation..."

declare -a NEWVPN_IPS
# Main script execution
for ((i=0; i<${#VARNA[@]}; i++)); do
    IFS=',' read -r IP PORT PEM_FILE USER <<< "${VARNA[$i]}"
    
    NEWVPN_IPS+=("$IP")
    
    # Install WireGuard
    install_wireguard "$IP" "$PORT" "$PEM_FILE" "$USER"
    
    # Generate keys
    generate_keys "$IP" "$PORT" "$PEM_FILE" "$USER"
done
for ((i=0; i<${#VAR_NA[@]}; i++)); do
    IFS=',' read -r IP PORT PEM_FILE USER <<< "${VAR_NA[$i]}"
        
    # Retrieve keys
    get_keys "$IP" "$PORT" "$PEM_FILE" "$USER"
    
    # Configure WireGuard
    configure_wireguard "$IP" "$PORT" "$PEM_FILE" "$USER" "$PRIVATE_KEY" "$PUBLIC_KEY"
       
    # Enable IP forwarding
    enable_ip_forwarding "$IP" "$PORT" "$PEM_FILE" "$USER"    
done

echo "WireGuard VPN setup complete."

