#!/bin/bash

set -e

clear

CURRENTUSER=$(whoami)
sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
sudo rm -rf /root/.ssh/known_hosts
sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

RED='\033[0;31m'
NC='\033[0m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
LBLUE='\033[1;34m'
DGRAY='\033[1;35m'
PURPLE='\033[0;35m'
RGRAY='\033[1;30m'
BOLD=$(tput bold)
NORM=$(tput sgr0)
ORANGE='\033[1;33m'

DoubleQuotes='"'
NoQuotes=''

USERINTERACTION="YES"
USERVALS=""
MANUALRUN="NO"
SOMECON="YES"

THESTACK_FOLDER="THESTACKFOLDER"
THESTACK_NAME="THESTACKNAME"

BASE="/opt/Matsya"
sudo mkdir -p $BASE
sudo mkdir -p $BASE/tmp
sudo mkdir -p $BASE/Scripts
sudo mkdir -p $BASE/Secrets
sudo mkdir -p $BASE/Resources
sudo mkdir -p $BASE/Output

source $BASE/Resources/StackVersioningAndMisc

LISTOFALLRANDOMNUMBERS=()

function GetNewRandomNumber {
    local FreshRandomNumber=$(shuf -i 1000-9999 -n 1)
    if printf '%s\0' "${LISTOFALLRANDOMNUMBERS[@]}" | grep -Fxqz -- $FreshRandomNumber; then	
    	GetNewRandomNumber
    else
        LISTOFALLRANDOMNUMBERS+=("$FreshRandomNumber")
    fi
    echo $FreshRandomNumber
}

echo -e "${ORANGE}=============================================================${NC}"
echo -e "\x1b[1;34mV\x1b[mersatile \x1b[1;34mA\x1b[mutomation \x1b[1;34mM\x1b[managing \x1b[1;34mA\x1b[mssorted \x1b[1;34mN\x1b[metworked \x1b[1;34mA\x1b[mpplications"
echo -e "${GREEN}=============================================================${NC}"
echo ''
echo -e "\x1b[3mV   V  AAAAA  M   M  AAAAA  N   N  AAAAA\x1b[m"
echo -e "\x1b[3mV   V  A   A  MM MM  A   A  NN  N  A   A\x1b[m"
echo -e "\x1b[3mV   V  AAAAA  M M M  AAAAA  N N N  AAAAA\x1b[m"
echo -e "\x1b[3m V V   A   A  M   M  A   A  N  NN  A   A\x1b[m"
echo -e "\x1b[3m  V    A   A  M   M  A   A  N   N  A   A\x1b[m"
echo ''
echo -e "\x1b[3m\x1b[4mSTACK NODE ADD\x1b[m"
echo ''

THEREIS15FILEOPTION="NO"

if [ "$#" -ne 1 ]; then
	USERVALS=""
else
	USERVALS=$1
	USERINTERACTION="NO"
	IFS='├' read -r -a USERLISTVALS <<< $USERVALS
	BASENODELOCATION="${USERLISTVALS[0]}"
	SECRETTHEKEY="${USERLISTVALS[1]}"
	THECLUSTERCHOICE="${USERLISTVALS[2]}"
	THESINGLEFILE="${USERLISTVALS[3]}"
	THEPICKFILE="${USERLISTVALS[4]}"
	THEFILEPATTERN="${USERLISTVALS[5]}"
	THEFILENUMBERS="${USERLISTVALS[6]}"	
	REQNODENUMBERS="${USERLISTVALS[7]}"	
	STACKNAME="${USERLISTVALS[8]}"
	K8SCONFIG="${USERLISTVALS[9]}"
	TEMPVAR3="${USERLISTVALS[10]}"
	KUBESADD="${USERLISTVALS[11]}"
	NODEAVB="${USERLISTVALS[12]}"
	GOFORIT="${USERLISTVALS[13]}"	
	USERINPUTCOUNT=${#USERLISTVALS[@]}
	if (( $USERINPUTCOUNT > 14 )) ; then
		THE14THOPTION="${USERLISTVALS[14]}"
		if [ "$THE14THOPTION" == "MANUALRUN" ] ; then
			MANUALRUN="YES"
		else
			if [ "$THE14THOPTION" == "HOSTNAMES" ] ; then
				_THE15THOPTION="${USERLISTVALS[15]}"
				IFS=',' read -r -a THE15THOPTION <<< $_THE15THOPTION
				THEREIS15FILEOPTION="YES"
			fi
		fi
	fi
fi

if [ "$SOMECON" == "YES" ] || [ "$SOMECON" == "yes" ] ; then
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
		UUID=$(uuidgen)
		UUIDREAL=${UUID:1:6}
		read -p "Node Files Location 			> " -e -i "$BASE/Output" BASENODELOCATION
		echo ""	
		
		read -s -p "Key 					> " -e -i "" SECRETTHEKEY
		echo ''	
		read -p "
Cluster Choice
$STACKLINELENGTHY 
SINGLE(1) / MULTI(2) / PATTERN(3) / PICK(4) 		 
$STACKLINELENGTHY
					> " -e -i "4" THECLUSTERCHOICE
		echo ""
	fi
	
	LISTOFFILES=()
	
	if [ "$THECLUSTERCHOICE" == "1" ] ; then
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
			read -p "Node File 				> " -e -i "$BASENODELOCATION/" THESINGLEFILE
			echo ""
		fi
		if [ -f "$THESINGLEFILE" ]
		then		
			LISTOFFILES+=("$THESINGLEFILE")	
		fi
	fi
	if [ "$THECLUSTERCHOICE" == "2" ] ; then
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
			TempCounter=0
			while [ $TempCounter -lt 1 ]
			do
				read -p "Node File (Type 'Q' To Quit) 			> " -e -i "$BASENODELOCATION/" THEPICKFILE
				echo ""
				if [ "$THEPICKFILE" == "Q" ] || [ "$THEPICKFILE" == "q" ] ; then
					TempCounter=$((TempCounter + 1))
				else
					if [ -f "$THEPICKFILE" ]
					then			
						LISTOFFILES+=("$THEPICKFILE")
					fi
				fi		
			done
		else
			IFS='¬' read -r -a THEPICK_FILE <<< $THEPICKFILE
			for THEPICK__FILE in "${THEPICK_FILE[@]}"
			do
				LISTOFFILES+=("$THEPICK__FILE")		
			done			
		fi				
	fi	
	if [ "$THECLUSTERCHOICE" == "3" ] ; then
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
			read -p "File Pattern 				> " -e -i "$BASENODELOCATION/" THEFILEPATTERN
			echo ""
		fi	
		for PATTERNFILE in $THEFILEPATTERN
		do
			if [ -f "$PATTERNFILE" ]
			then
				LISTOFFILES+=("$PATTERNFILE")
			fi
		done		
	fi
	if [ "$THECLUSTERCHOICE" == "4" ] ; then
		echo "$STACKLINELENGTHY"
		TempCounter=1
		for EVERYFILE in "$BASENODELOCATION"/*; do
			if [ -f "$EVERYFILE" ]; then
				if (( TempCounter < 10 )) ; then
					echo "(0$TempCounter) $EVERYFILE"
				else
					echo "($TempCounter) $EVERYFILE"
				fi
				TempCounter=$((TempCounter + 1))
			fi
		done
		echo "$STACKLINELENGTHY"
		echo ""
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then	
			read -p "Enter File Number(s) Comma Based	> " -e -i "" THEFILENUMBERS
			echo ""
		fi
		IFS=',' read -r -a CHOICELIST <<< $THEFILENUMBERS
		
		TempCounter=1
		TempCounter2=1
		for EVERYFILE in "$BASENODELOCATION"/*; do
			if [ -f "$EVERYFILE" ]; then
				for _CHOICE in "${CHOICELIST[@]}"
				do
					if (( TempCounter == _CHOICE )) ; then
						LISTOFFILES+=("$EVERYFILE")
					fi
					TempCounter2=$((TempCounter2 + 1))		
				done
				TempCounter=$((TempCounter + 1))				
			fi
		done		
	fi
	
	ALLNODESLIST=()
	
	TEMPRANDOMFOLDER=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	sudo mkdir -p $BASE/tmp/$TEMPRANDOMFOLDER
	for EACHFILE in "${LISTOFFILES[@]}"
	do
		$BASE/Scripts/SecretsFile-Decrypter "$EACHFILE├1├2├$BASE/tmp/$TEMPRANDOMFOLDER├$SECRETTHEKEY"
	done
	for EVERYFILE in "$BASE/tmp/$TEMPRANDOMFOLDER"/*; do
		if [ -f "$EVERYFILE" ]; then
			LINES=$(cat $EVERYFILE)
			for LINE in $LINES; do
				ALLNODESLIST+=("$LINE")				
			done		
		fi
	done	
	sudo rm -rf $BASE/tmp/$TEMPRANDOMFOLDER

	if [ "$THEREIS15FILEOPTION" == "YES" ] ; then
		REQNODENUMBERS=""
	fi
		
	REQNODEACTUALNUMBERS=()
	echo "$STACKLINELENGTHY"
	TempXCounter=1
	for EACHXNODE in "${ALLNODESLIST[@]}"
	do
		REQNODEACTUALNUMBERS+=("$EACHXNODE")	
		IFS='├' read -r -a _EACHXNODE <<< $EACHXNODE
		IXP="${_EACHXNODE[0]}"
		NAXME="${_EACHXNODE[1]}"
		
		if (( TempXCounter < 10 )) ; then
			echo "(0$TempXCounter) $NAXME ($IXP)"
		else
			echo "($TempXCounter) $NAXME ($IXP)"
		fi
		
		if [ "$THEREIS15FILEOPTION" == "YES" ] ; then
			for THE15TH in "${THE15THOPTION[@]}"
			do
				if [ "$NAXME" == "$THE15TH" ] ; then
					REQNODENUMBERS="$REQNODENUMBERS,$TempXCounter"
				fi
			done		
		fi
		
		TempXCounter=$((TempXCounter + 1))	
	done
	echo "$STACKLINELENGTHY"
	
	if [ "$THEREIS15FILEOPTION" == "YES" ] ; then
		REQNODENUMBERS=${REQNODENUMBERS:1}
	fi	
	
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
		echo ""	
		read -p "Enter Node Number(s) Comma Based 0=ALL	> " -e -i "0" REQNODENUMBERS
	fi
	
	if [ "$REQNODENUMBERS" == "0" ] ; then
		echo ""	
	else
		echo ""
		REQNODEACTUALNUMBERS=()	
		
		IFS=',' read -r -a CHOICELIST <<< $REQNODENUMBERS
		
		TempCounter=1
		TempCounter2=1
		for EACHNODE in "${ALLNODESLIST[@]}"
		do
			for _CHOICE in "${CHOICELIST[@]}"
			do
				if (( TempCounter == _CHOICE )) ; then
					REQNODEACTUALNUMBERS+=("$EACHNODE")
				fi
				TempCounter2=$((TempCounter2 + 1))		
			done
			TempCounter=$((TempCounter + 1))
		done		
	fi
	
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
		echo -e "${RED}$STACKLINELENGTHY${NC}"
		echo -e "${GREEN}${BOLD}		\x1b[5m\x1b[3m\x1b[4m$THESTACK_NAME\x1b[m ${NORM}${NC}"
		echo -e "${RED}$STACKLINELENGTHY${NC}"
	fi
	
	STACKNAME="$THESTACK_NAME"
	
	TempCounter=0
	NODEARRAYLEN=$(echo ${#REQNODEACTUALNUMBERS[@]})
	ALLITEMINSTACKLIST=()
	while [ $TempCounter -lt 1 ]
	do
		if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
			read -p "
Stack Config (All Nodes)
$ALLSTACKITEMSLIST
					> " -e -i "" K8SCONFIG
			echo ""
		fi
		
		IFS='|' read -r -a CONFIGITEMSLIST <<< $K8SCONFIG
		CONFIGITEMSLISTLEN=$(echo ${#CONFIGITEMSLIST[@]})
		
		if [[ $CONFIGITEMSLISTLEN -eq $NODEARRAYLEN ]] ; then
			TempCounter=$((TempCounter + 1))
		fi
		
		for _CIL in "${CONFIGITEMSLIST[@]}"
		do
			IFS=',' read -r -a _CIL_SUB <<< $_CIL
			for _CIL_SUB_ in "${_CIL_SUB[@]}"
			do
				ALLITEMINSTACKLIST+=("$_CIL_SUB_")
			done						
		done						
	done

	echo "$STACKLINELENGTHY"
	ALLITEMINSTACKUNIQUELIST=($(echo "${ALLITEMINSTACKLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' '))
	
	declare -A ALLITEMINSTACKVERSIONLIST
	
	for _ALLITEMINSTACKUNIQUELIST in "${ALLITEMINSTACKUNIQUELIST[@]}"
	do
		TEMPVAR1="${STACKITEMSVERSIONMAPPING[$_ALLITEMINSTACKUNIQUELIST]}"
		if [ "$TEMPVAR1" == "" ] ; then
			ALLITEMINSTACKVERSIONLIST["$_ALLITEMINSTACKUNIQUELIST"]="NA"
		else
			if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
				TEMPVAR2="${STACKITEMSVERSIONQMAPPING[$_ALLITEMINSTACKUNIQUELIST]}"
				read -p "$TEMPVAR2" -e -i "$TEMPVAR1" TEMPVAR3
				ALLITEMINSTACKVERSIONLIST["$_ALLITEMINSTACKUNIQUELIST"]="$TEMPVAR3"
			else
				ALLITEMINSTACKVERSIONLIST["$_ALLITEMINSTACKUNIQUELIST"]="$TEMPVAR1"
			fi		
		fi
	done
	echo "$STACKLINELENGTHY"
	
	if [ "$USERINTERACTION" == "YES" ] || [ "$USERINTERACTION" == "yes" ] ; then
		echo ""	
		read -p "K8S YES(1) / NO(2)			> " -e -i "1" KUBESADD	
		echo ""
		read -p "Nodes List
$STACKLINELENGTHY 
Attach(1) / View(2) / Both(3)		 
$STACKLINELENGTHY
					> " -e -i "3" NODEAVB
		echo ""
	fi

	WHENJOBBEGAN=$(echo $(date +%H):$(date +%M))
	
	ALLREQNODES=()
	THENODELISTFILE="$THESTACK_FOLDER/$THESTACK_NAME-LIST"

	TEMPRANDOMFILE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	$BASE/Scripts/SecretsFile-Decrypter "$THENODELISTFILE├1├1├$BASE/tmp/$TEMPRANDOMFILE├$SECRETTHEKEY"
	LINES=$(cat $BASE/tmp/$TEMPRANDOMFILE)
	for LINE in $LINES; do
		ALLREQNODES+=("$LINE")				
	done	
	sudo rm -rf $BASE/tmp/$TEMPRANDOMFILE

	TEMPRANDOMCFILE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	STACKK8SADD1LIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	ADD1STACKFILESTART='#!/bin/bash'"
	
sudo mv /home/matsya/$TEMPRANDOMCFILE /home/matsya/$TEMPRANDOMCFILE.yaml	
"
	echo "$ADD1STACKFILESTART" | sudo tee $BASE/tmp/$STACKK8SADD1LIST > /dev/null
	sudo chmod 777 $BASE/tmp/$STACKK8SADD1LIST

	STACKK8SADD2LIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	ADD2STACKFILESTART='#!/bin/bash'"
	
sudo mv $BASE/tmp/$TEMPRANDOMCFILE $BASE/tmp/$TEMPRANDOMCFILE.yaml	
"
	echo "$ADD2STACKFILESTART" | sudo tee $BASE/tmp/$STACKK8SADD2LIST > /dev/null
	sudo chmod 777 $BASE/tmp/$STACKK8SADD2LIST
	
	echo "$STACKLINELENGTHY"
	sudo rm -rf /home/$CURRENTUSER/.ssh/known_hosts
	sudo rm -rf /root/.ssh/known_hosts	
	HOSTSFILE=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	touch $BASE/tmp/$HOSTSFILE	
	sudo chmod 777 $BASE/tmp/$HOSTSFILE
	HOSTSEXE1FILE='#!/bin/bash'"
"
	echo "$HOSTSEXE1FILE" | sudo tee $BASE/tmp/$HOSTSFILE > /dev/null		
	
	for EACHXNODE in "${ALLREQNODES[@]}"
	do
		IFS='├' read -r -a _EACHXNODE <<< $EACHXNODE
		IXP="${_EACHXNODE[0]}"
		NM="${_EACHXNODE[9]}"
		UN="${_EACHXNODE[3]}"
		PW="${_EACHXNODE[4]}"
		VN="${_EACHXNODE[10]}"		

		GetCodeForHostAddition "$IXP" "$NM" "$BASE/tmp/$HOSTSFILE"
		GetCodeForConfigAddition "$IXP" "$NM" "$UN" "$PW" "$VN" "$BASE/tmp/$STACKK8SADD1LIST" "/home/matsya/$TEMPRANDOMCFILE"
		GetCodeForConfigAddition "$IXP" "$NM" "$UN" "$PW" "$VN" "$BASE/tmp/$STACKK8SADD2LIST" "$BASE/tmp/$TEMPRANDOMCFILE"	
	done

	CURDATE2=$(date)
	TempCounter=0

	THECOMPLETEFINALNODELIST=()
	
	STACKDELETELIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	DELETESTACKFILESTART='#!/bin/bash'"
"
	echo "$DELETESTACKFILESTART" | sudo tee $BASE/tmp/$STACKDELETELIST > /dev/null
	sudo chmod 777 $BASE/tmp/$STACKDELETELIST	
	
	for THEFINALNODE in "${REQNODEACTUALNUMBERS[@]}"
	do
		THESTACKPREFIX=""	
		IFS='├' read -r -a EACHSPLITNODE <<< $THEFINALNODE
		IP="${EACHSPLITNODE[0]}"
		PORT="${EACHSPLITNODE[2]}"
		UN="${EACHSPLITNODE[3]}"
		PW="${EACHSPLITNODE[4]}"
		
		OLDNAME=$(echo "${EACHSPLITNODE[1]}" | rev)
		IFS='-' read -r -a _OLDNAME <<< $OLDNAME
		NAMEOLD=$(echo "${_OLDNAME[1]}" | rev)
		INSTANCEID="$NAMEOLD"
		
		GetCodeForNodeDelete "$INSTANCEID" "${EACHSPLITNODE[5]}" "${EACHSPLITNODE[7]}" "$BASE/tmp/$STACKDELETELIST"
						
		IFS='|' read -r -a CONFIGITEMSLIST <<< $K8SCONFIG
		TempCounter2=0
		THEALLOTMENT=""
		for _CIL in "${CONFIGITEMSLIST[@]}"
		do
			if (( TempCounter == TempCounter2 )) ; then
				IFS=',' read -r -a _CIL_SUB <<< $_CIL
				THEALLOTMENT="$_CIL"
				for _CIL_SUB_ in "${_CIL_SUB[@]}"
				do
					STACKITEMNAME="${STACKITEMSMAPPING[$_CIL_SUB_]}"
					STACKITEMNAME=$(echo "$STACKITEMNAME" | tr '[:upper:]' '[:lower:]')				
					THESTACKPREFIX="$THESTACKPREFIX-$STACKITEMNAME"
				done
			fi
			TempCounter2=$((TempCounter2 + 1))						
		done
				
		SOMERANDOMNUMBER=$(GetNewRandomNumber)
		SOMERANDOMCHAR=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 4 | head -n 1)
		SOMERANDOMCHAR=$(echo "$SOMERANDOMCHAR" | tr '[:upper:]' '[:lower:]')
		NAME="$STACKNAME""$THESTACKPREFIX-$SOMERANDOMNUMBER-$SOMERANDOMCHAR"
		
		sshpass -p "$PW" ssh -o ConnectTimeout=15 $UN@$IP -p $PORT -o "StrictHostKeyChecking=no" "sudo rm -rf /etc/hostname && echo \"$NAME\" | sudo tee -a /etc/hostname > /dev/null && sudo hostnamectl set-hostname \"$NAME\""
		
		THERESPONSE=$(sshpass -p "$PW" ssh -o ConnectTimeout=15 $UN@$IP -p $PORT  -o "StrictHostKeyChecking=no" "[ -e \"/usr/bin/kk\" ] && echo \"YES\" || echo \"NO\"")
		if [ "$THERESPONSE" == "NO" ] ; then
			sshpass -p "$PW" ssh -o ConnectTimeout=15 $UN@$IP -p $PORT -o "StrictHostKeyChecking=no" "wget https://github.com/kubesphere/kubekey/releases/download/$THEK8SKUBESPHEREVERSION/kubekey-$THEK8SKUBESPHEREVERSION-linux-amd64.tar.gz && tar xf kubekey-$THEK8SKUBESPHEREVERSION-linux-amd64.tar.gz && rm -f kubekey-$THEK8SKUBESPHEREVERSION-linux-amd64.tar.gz && chmod +x kk && sudo mv kk /usr/bin/kk"
		fi
		
		THECOMPLETEFINALNODELIST+=("$THEFINALNODE├$NAME├$THEALLOTMENT")
		
		GetCodeForHostAddition "$IP" "$NAME" "$BASE/tmp/$HOSTSFILE"
		GetCodeForConfigAddition "$IP" "$NAME" "$UN" "$PW" "$THEALLOTMENT" "$BASE/tmp/$STACKK8SADD1LIST" "/home/matsya/$TEMPRANDOMCFILE"
		GetCodeForConfigAddition "$IP" "$NAME" "$UN" "$PW" "$THEALLOTMENT" "$BASE/tmp/$STACKK8SADD2LIST" "$BASE/tmp/$TEMPRANDOMCFILE"	
			
		TempCounter=$((TempCounter + 1))
	done
	CURDATE3=$(date)
	
	echo "$STACKLINELENGTHY"
	echo ""

	ITER=${SECRETTHEKEY:7:6}
	STACKNODELIST=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1) && touch $BASE/tmp/$STACKNODELIST && sudo chmod 777 $BASE/tmp/$STACKNODELIST
	
	K8SHACounter=0
	THEK8SADD1INSTANCE=""	
	LISTOFELIGNODES=""
	for EXN in "${ALLREQNODES[@]}"
	do
		IFS='├' read -r -a EXXN <<< $EXN
		NXM="${EXXN[9]}"
		ASSNROLES="${EXXN[10]}"
		
		IFS=',' read -r -a ASSN_ROLES <<< $ASSNROLES
		for _ASSN_ROLE in "${ASSN_ROLES[@]}"
		do
			if [ "$_ASSN_ROLE" == "1" ] ; then
				THEK8SADD1INSTANCE="$EXN"
			fi
			if [ "$_ASSN_ROLE" == "2" ] || [ "$_ASSN_ROLE" == "3" ] ; then
				K8SHACounter=$((K8SHACounter + 1))
			fi
		done
				
		LISTOFELIGNODES="$LISTOFELIGNODES,$NXM"
		echo "$EXN" | sudo tee -a $BASE/tmp/$STACKNODELIST > /dev/null
		
		OLDNAME=$(echo "${EXXN[1]}" | rev)
		IFS='-' read -r -a _OLDNAME <<< $OLDNAME
		NAMEOLD=$(echo "${_OLDNAME[1]}" | rev)
		INSTANCEID="$NAMEOLD"
		
		GetCodeForNodeDelete "$INSTANCEID" "${EXXN[5]}" "${EXXN[7]}" "$BASE/tmp/$STACKDELETELIST"
	done
	for THEFINALNODE in "${THECOMPLETEFINALNODELIST[@]}"
	do
		IFS='├' read -r -a EACHSPLITNODE <<< $THEFINALNODE
		NM="${EACHSPLITNODE[9]}"
		ASSNROLES="${EACHSPLITNODE[10]}"
		
		IFS=',' read -r -a ASSN_ROLES <<< $ASSNROLES
		for _ASSN_ROLE in "${ASSN_ROLES[@]}"
		do
			if [ "$_ASSN_ROLE" == "1" ] ; then
				THEK8SADD1INSTANCE="$THEFINALNODE"
			fi
			if [ "$_ASSN_ROLE" == "2" ] || [ "$_ASSN_ROLE" == "3" ] ; then
				K8SHACounter=$((K8SHACounter + 1))
			fi			
		done
				
		LISTOFELIGNODES="$LISTOFELIGNODES,$NM"	
		echo "$THEFINALNODE" | sudo tee -a $BASE/tmp/$STACKNODELIST > /dev/null
	done	
	LISTOFELIGNODES=${LISTOFELIGNODES:1}

	if [ "$KUBESADD" == "1" ] ; then
		if [ "$THEK8SADD1INSTANCE" == "" ] ; then
			exit
		fi
		
		THELINE1TOREPLACE=""
		
		echo "
THELINE1TOFIND=\"\"
while read -r THE1LINE ; do
	THELINE1TOFIND=\"\$THE1LINE\"
done <<< \"\$(grep -wn haproxy /home/matsya/$TEMPRANDOMCFILE.yaml | cut -d: -f1)\"			
		" | sudo tee -a $BASE/tmp/$STACKK8SADD1LIST > /dev/null

		echo "
THELINE1TOFIND=\"\"
while read -r THE1LINE ; do
	THELINE1TOFIND=\"\$THE1LINE\"
done <<< \"\$(grep -wn haproxy $BASE/tmp/$TEMPRANDOMCFILE.yaml | cut -d: -f1)\"			
		" | sudo tee -a $BASE/tmp/$STACKK8SADD2LIST > /dev/null
			
		if (( $K8SHACounter > 2 )) ; then
			THELINE1TOREPLACE="internalLoadbalancer: haproxy"
		else
			THELINE1TOREPLACE="#internalLoadbalancer: haproxy"
		fi
		
		echo "#sed -i \"\$THELINE1TOFIND\"'s/.*/'\"    $THELINE1TOREPLACE\"'/' /home/matsya/$TEMPRANDOMCFILE.yaml" | sudo tee -a $BASE/tmp/$STACKK8SADD1LIST > /dev/null
		echo "#sed -i \"\$THELINE1TOFIND\"'s/.*/'\"    $THELINE1TOREPLACE\"'/' $BASE/tmp/$TEMPRANDOMCFILE.yaml" | sudo tee -a $BASE/tmp/$STACKK8SADD2LIST > /dev/null
	fi	

	echo "cat /etc/hosts" | sudo tee -a $BASE/tmp/$HOSTSFILE > /dev/null
	echo "sudo -H -u root bash -c \"kk add -y nodes -f /home/matsya/$TEMPRANDOMCFILE.yaml\" && rm -rf /home/matsya/$TEMPRANDOMCFILE.yaml" | sudo tee -a $BASE/tmp/$STACKK8SADD1LIST > /dev/null
	echo "sudo mv $BASE/tmp/$TEMPRANDOMCFILE.yaml $BASE/tmp/$TEMPRANDOMCFILE" | sudo tee -a $BASE/tmp/$STACKK8SADD2LIST > /dev/null
	
	echo "
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-EXECUTE-ORDER-66
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-CONFIG
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-LIST
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-CONNECT
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-FILE-MANAGE
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-NODE-MANAGE-ADD
sudo rm -rf $BASE/Output/$STACKNAME/$STACKNAME-NODE-MANAGE-REMOVE-DELETE
sudo rm -rf $BASE/Output/$STACKNAME
" | sudo tee -a $BASE/tmp/$STACKDELETELIST > /dev/null

	VAR6=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	sudo cp $BASE/tmp/$STACKDELETELIST $BASE/Secrets/$VAR6
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/$VAR6
	sudo chmod u=r,g=,o= $BASE/Secrets/$VAR6
	openssl enc -a -aes-256-cbc -pbkdf2 -iter $ITER -in $BASE/Secrets/$VAR6 -out $BASE/Secrets/".$VAR6" -k $SECRETTHEKEY
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/".$VAR6"
	sudo chmod u=r,g=,o= $BASE/Secrets/".$VAR6"
	sudo rm -rf $BASE/Secrets/$VAR6
	sudo rm -rf /root/.bash_history
	sudo rm -rf /home/$CURRENTUSER/.bash_history
	sudo rm -rf $THESTACK_FOLDER/$THESTACK_NAME-EXECUTE-ORDER-66
	sudo mv $BASE/Secrets/".$VAR6" $THESTACK_FOLDER/$THESTACK_NAME-EXECUTE-ORDER-66
			
	VAR8=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
	sudo cp $BASE/tmp/$STACKNODELIST $BASE/Secrets/$VAR8
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/$VAR8
	sudo chmod u=r,g=,o= $BASE/Secrets/$VAR8
	openssl enc -a -aes-256-cbc -pbkdf2 -iter $ITER -in $BASE/Secrets/$VAR8 -out $BASE/Secrets/".$VAR8" -k $SECRETTHEKEY
	sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/".$VAR8"
	sudo chmod u=r,g=,o= $BASE/Secrets/".$VAR8"
	sudo rm -rf $BASE/Secrets/$VAR8
	sudo rm -rf /root/.bash_history
	sudo rm -rf /home/$CURRENTUSER/.bash_history
	sudo rm -rf $THESTACK_FOLDER/$THESTACK_NAME-LIST
	sudo mv $BASE/Secrets/".$VAR8" $THESTACK_FOLDER/$THESTACK_NAME-LIST
	
	(
		set -Ee
		function _catch {
			echo "ERROR"
			exit 0
		}
		function _finally {
			ABC="XYZ"
		}
		trap _catch ERR
		trap _finally EXIT
		$THESTACK_FOLDER/$THESTACK_NAME-FILE-MANAGE "EXECUTE" "$SECRETTHEKEY├1├$LISTOFELIGNODES├$BASE/tmp/$HOSTSFILE├100"								
	)

	if [ "$KUBESADD" == "1" ] ; then
		IFS='├' read -r -a EACHSPLITNODE <<< "$THEK8SADD1INSTANCE"
		NM="${EACHSPLITNODE[9]}"
		
		THENODECONFIGFILE="$THESTACK_FOLDER/$THESTACK_NAME-CONFIG"
		$BASE/Scripts/SecretsFile-Decrypter "$THENODECONFIGFILE├1├1├$BASE/tmp/$TEMPRANDOMCFILE├$SECRETTHEKEY"	
		
		(
			set -Ee
			function _catch {
				echo "ERROR"
				exit 0
			}
			function _finally {
				ABC="XYZ"
			}
			trap _catch ERR
			trap _finally EXIT
			$THESTACK_FOLDER/$THESTACK_NAME-FILE-MANAGE "PUSH" "$SECRETTHEKEY├1├$NM├$BASE/tmp/$TEMPRANDOMCFILE├100"								
		)
		(
			set -Ee
			function _catch {
				echo "ERROR"
				exit 0
			}
			function _finally {
				ABC="XYZ"
			}
			trap _catch ERR
			trap _finally EXIT
			$THESTACK_FOLDER/$THESTACK_NAME-FILE-MANAGE "EXECUTE" "$SECRETTHEKEY├1├$NM├$BASE/tmp/$STACKK8SADD1LIST├100"								
		)
		$BASE/tmp/$STACKK8SADD2LIST
		
		VARC8=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 15 | head -n 1)
		sudo cp $BASE/tmp/$TEMPRANDOMCFILE $BASE/Secrets/$VARC8
		sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/$VARC8
		sudo chmod u=r,g=,o= $BASE/Secrets/$VARC8
		openssl enc -a -aes-256-cbc -pbkdf2 -iter $ITER -in $BASE/Secrets/$VARC8 -out $BASE/Secrets/".$VARC8" -k $SECRETTHEKEY
		sudo chown $CURRENTUSER:$CURRENTUSER $BASE/Secrets/".$VARC8"
		sudo chmod u=r,g=,o= $BASE/Secrets/".$VARC8"
		sudo rm -rf $BASE/Secrets/$VARC8
		sudo rm -rf /root/.bash_history
		sudo rm -rf /home/$CURRENTUSER/.bash_history
		sudo rm -rf $THESTACK_FOLDER/$THESTACK_NAME-CONFIG
		sudo mv $BASE/Secrets/".$VARC8" $THESTACK_FOLDER/$THESTACK_NAME-CONFIG
					
		sudo rm -rf $BASE/tmp/$TEMPRANDOMCFILE									
	fi
							
	if [ "$NODEAVB" == "1" ] || [ "$NODEAVB" == "3" ] ; then
		$BASE/tmp/$HOSTSFILE
	fi	
	if [ "$NODEAVB" == "2" ] || [ "$NODEAVB" == "3" ] ; then
		echo ""
		echo "$STACKLINELENGTHY"		
		cat /etc/hosts
		echo "$STACKLINELENGTHY"
		echo ""
	fi
		
	sudo rm -rf $BASE/tmp/$HOSTSFILE
	sudo rm -rf $BASE/tmp/$STACKDELETELIST
	sudo rm -rf $BASE/tmp/$STACKNODELIST
	sudo rm -rf $BASE/tmp/$STACKK8SADD1LIST
	sudo rm -rf $BASE/tmp/$STACKK8SADD2LIST
	
	WHENJOBFIN=$(echo $(date +%H):$(date +%M))
	SEC1=`date +%s -d ${WHENJOBBEGAN}`
	SEC2=`date +%s -d ${WHENJOBFIN}`
	DIFFSEC=`expr ${SEC2} - ${SEC1}`
	THETOTALTIMETAKEN=$(echo `date +%M -ud @${DIFFSEC}`)
	echo "Total Time Taken => $THETOTALTIMETAKEN Minutes"	
	echo ''	
	echo "=============================================================================="
	echo ''	
fi

sudo rm -rf /root/.bash_history
sudo rm -rf /home/$CURRENTUSER/.bash_history

if [ "$MANUALRUN" == "YES" ] || [ "$MANUALRUN" == "yes" ] ; then
	read -p "" -e -i "" QUIT
	echo ""
fi		

